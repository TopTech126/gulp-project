/**
 * ==============================================
 * IMPORTANT
 * 
 * Please DO NOT edit this file. 
 * 
 * Use functions-overrides.js to make 
 * custom modifications and function overrides.
 * 
 * ==============================================
 */


/* Dismissable popper */
function handleDismissablePopper() {
  if (document.querySelector('.popover-dismiss')) {
    const popover = new bootstrap.Popover('.popover-dismiss', {
      trigger: 'focus'
    })
  }
}

/* Listen for custom 'color-mode-change' events */
function handleColorModeChangeEvent() {
  document.querySelector('html').addEventListener('color-mode-change', () => {
    const newValue = this.getAttribute('data-bs-theme');
    // console.log(`data-bs-theme changed to: ${newValue}`);
  });
}

/* Handle theme mode switch */
function handleThemeModeSwitch() {

  const getStoredTheme = () => localStorage.getItem('theme');
  const setStoredTheme = theme => localStorage.setItem('theme', theme);

  const getPreferredTheme = () => {

    const storedTheme = getStoredTheme();

    if (storedTheme) {
      return storedTheme;
    }

    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  const setTheme = theme => {
    
    document.documentElement.setAttribute('data-bs-theme', theme);

    setStoredTheme(theme);

    /* Trigger a custom event when the data attribute changes */
    const dataAttributeChangeEvent = new Event('theme-mode-change', {
      bubbles: true, // Allow the event to bubble up to its container
    });

    document.querySelector('html').dispatchEvent(dataAttributeChangeEvent);
  }

  setTheme(getPreferredTheme());

  const toggleThemeMode = () => {
    const themeToSet = getStoredTheme() === 'light' ? 'dark' : 'light';
    setTheme(themeToSet);
  };

  const toggleButton = document.querySelector('#cm-mode-switcher');
 
  toggleButton && toggleButton.addEventListener('click', toggleThemeMode);
}

function handleMainElementMaxHeight() {
  
  const mainElement = document.querySelector('main');

  let mainElementTopOffset = 0;

  /* Calculate the offset from the top of the viewport */
  if (mainElement) {
    const rect = mainElement.getBoundingClientRect();
    mainElementTopOffset = rect.top;
  }

  const footerElement = document.querySelector('footer');
  const footerHeight = footerElement ? footerElement.offsetHeight : 0;

  /* Set the value as a CSS variable */
  document.documentElement.style.setProperty('--top-offset', `${mainElementTopOffset + footerHeight}px`);

}

function handleFormValudation() {

  /* Fetch all the forms we want to apply custom Bootstrap validation styles to */
  const forms = document.querySelectorAll('.needs-validation')

  /* Loop over them and prevent submission */
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
      if (!form.checkValidity()) {
        event.preventDefault()
        event.stopPropagation()
      }

      form.classList.add('was-validated')
    }, false)
  })
}

function clearFormFields(formElements) {
  for (var i = 0, len = formElements.length; i < len; i++) {
    var formElement = formElements[i];

    switch (formElement.tagName.toLowerCase()) {

      case 'select':
        formElement.selectedIndex = 0; // or -1 for no option selected
        break;

      case 'input':
      
        if (formElement.getAttribute('type') === 'checkbox') {
          formElement.checked = false;
        }

        if (formElement.getAttribute('type') === 'radio') {
          if (formElement.defaultChecked) {
            formElement.checked = true;
          } else {
            formElement.checked = false;
          }
        }

        if (formElement.getAttribute('type') === 'text') {
          if (formElement.classList.contains('price-slider-value-min') || formElement.classList.contains('price-slider-value-max')) {
            const accordionBody = formElement.closest('.accordion-body');
            
            if (!accordionBody) {
              console.error('Error:', 'Accordion body is missing');
            }
            
            const priceSlider = accordionBody.querySelector('#car-price-slider');
            if (!priceSlider) return;
            
            if (formElement.id === 'price-min') {
              formElement.value = priceSlider.dataset.startMin;
            }
            
            if (formElement.id === 'price-max') {
              formElement.value = priceSlider.dataset.startMax;
            }
          }
        }
        break;

      default:
        break;
    }

    // Dispatch the custom event for the specific form element after it is cleared
    const event = new CustomEvent('formFieldCleared', {
      detail: { formElement: formElement }
    });
    formElement.dispatchEvent(event);
  }
}

function resetFilterWidgetAccordionOption(clear) {

  const accordionItem = clear.closest('.accordion-item');
  const formElements = accordionItem.querySelectorAll('select, input');

  clearFormFields(formElements);
}

function resetFilterWidgetAllOptions(clear) {

  const filterFields = clear.closest('.filter-fields');
  const formElements = filterFields.querySelectorAll('select, input');

  clearFormFields(formElements)
}

/* Detect when position sticky is triggered */
function confirmSticky(elementClass, toggleClass) {
  const el = document.querySelector(elementClass)
  if (typeof (el) != 'undefined' && el != null) {
    const observer = new IntersectionObserver(
      ([e]) => e.target.classList.toggle(toggleClass, e.intersectionRatio < 1), {
        rootMargin: '-1px 0px 0px 0px',
        threshold: [1]
      }
    );

    observer.observe(el);
  }
}

function handleFavoritesBtn() {
  const favoritesBtns = document.querySelectorAll('.btn-favorites');
  
  favoritesBtns.forEach(btn => {
    btn.addEventListener('click', function(e) {
      btn.classList.toggle('favorites-active');
    });
  });
}

/* Handle compare button one/off */
function handleCompareBtn() {

  const compareBtns = document.querySelectorAll('.btn-compare')
  
  compareBtns.forEach(btn => {
    btn.addEventListener('click', function(e) {
      btn.classList.toggle('compare-active');

      const drawerToggle = document.querySelector('.drawer-toggle');
      const carDetails = btn.closest('.car-details');
      const carItem = btn.closest('.car-item');

      if (carDetails && drawerToggle) {      
        flyTo(carDetails.querySelector('.owl-item.active img'), drawerToggle);
      }
      
      if (carItem && drawerToggle) {      
        flyTo(carItem.querySelector('.carousel-item.active img'), drawerToggle);
      }
    })
  });
}

/* Make responsive comparison table adapt with sticky table header */
function prepareComparisonTable() {
  const mq = window.matchMedia('(min-width: 1200px)');
  const ch = document.querySelector('.comparison-head');
  const ct = document.querySelector('.comparison-table');

  if (typeof (ch) != 'undefined' && ch != null) {
    // ch.style.overflowX = (mq.matches) ? 'auto' : 'clip';
    ct.style.overflowX = (mq.matches) ? 'clip' : 'auto';
  }

  window.addEventListener("resize", () => {
    if (typeof (ct) != 'undefined' && ct != null) {
      ct.style.overflowX = (this.innerWidth < 1200) ? 'auto' : 'clip';
    }
  });
}

/* Remove comparison table item */
function removeComparisonItem(cellNumber) {
  const tables = document.querySelectorAll('.comparison-table .accordion-body>.table, .comparison-table thead');
  
  if (typeof (tables) != 'undefined' && tables != null) {

    /* Tables */
    for (let t = 0; t < tables.length; t++) {

      /* Table rows */
      for(let tr = 0; tr < tables[t].rows.length; tr++) {
        const _currentCell = tables[t].rows[tr].cells[cellNumber];
        const _firstCell = tables[0].rows[0].cells[cellNumber];
        // tables[i].rows[j].cells[cellNumber].remove();
        _currentCell.classList.add('remove-animation');
        
        setTimeout(() => {
          _firstCell.innerHTML = `<th class="align-top h-100 py-0">
              <div class="d-flex flex-column h-100">
                <div class="mb-auto">
                  <div class="d-block">
                    <div class="comparison-item-placeholder rounded border border-2 bg-body-tertiary d-flex flex-column align-items-center justify-content-center">
                      <span class="text-body-secondary add-to-compare fs-3 fw-bold">+</span>
                      <span class="text-body-secondary add-to-compare fs-sm fw-bold">Add Car</span>
                    </div>
                  </div>
                </div>
              </div>
            </th>`;
          _firstCell.classList.add('comparison-column-empty');
          _firstCell.removeAttribute['data-index'];
          _firstCell.setAttribute('role', 'button');
          _firstCell.setAttribute('data-bs-toggle', 'modal');
          _firstCell.setAttribute('data-bs-target', '#addToCompareModal');

          _currentCell.innerHTML = '<span class="ms-2">â€”</span>';
          _currentCell.parentNode.appendChild(_currentCell);
          _currentCell.classList.remove('remove-animation')
        }, 1000);
      //  document.querySelector('.comparison-table').style.setProperty('--comparison-items', tables[i].rows[j].cells.length-1);
      }
    }
  }
}

function handleComparisonTableItemRemoval() {

  const tableHead = document.querySelector('thead');
  let rIndex, cIndex;
  
  if (typeof (tableHead) != 'undefined' && tableHead != null) {

    /* Table rows */
    for (let tr = 0; tr < tableHead.rows.length; tr++) {

      /* Table cells */
      for (let tc = 0; tc < tableHead.rows[tr].cells.length; tc++) {
        tableHead.rows[tr].cells[tc].onclick = function(e) {
          const classList = e.target.className.split(/\s+/);
          for (let k = 0; k < classList.length; k++) {
            if (classList[k] === 'comparison-remove') {
              
              rIndex = this.parentElement.rowIndex;
              cIndex = this.cellIndex;
              // console.log("Row : "+rIndex+" , Cell : "+cIndex);
              removeComparisonItem(cIndex);
              
              const drawerItems = document.querySelector('.car-comparison-list');
              const drawerItem = drawerItems.children[cIndex-1];
              const columnsWrapper = this.closest('tr');
              const column = this.closest('th');
              column.classList.remove('comparison-column-item');
              column.removeAttribute['data-index']
              removeElement(drawerItem);
              
              const columns = columnsWrapper.querySelectorAll('.comparison-column-item');
              reindexElements(columnsWrapper, columns);

              document.querySelector('.comparison-count').textContent = columns.length;
            }
          }
        }
      }
    }
  }
}

function handleComparisonSimilaritiesAndDifferences() {
  
  document.addEventListener('DOMContentLoaded', () => {
    const highlightCheckbox = document.getElementById('compareHighlightDifferences');
    const hideCheckbox = document.getElementById('compareHideSimilarities');
    
    function highlightDifferences() {
      const rows = document.querySelectorAll('.accordion-item table tbody tr');
      rows.forEach(row => {
        const cells = Array.from(row.querySelectorAll('td'))
          .map(cell => cell.textContent.trim())
          .filter(text => text !== 'â€”'); // Exclude cells with "â€”"
        const uniqueValues = [...new Set(cells)];
        if (uniqueValues.length > 1) {
          row.classList.add('highlight-difference');
        } else {
          row.classList.remove('highlight-difference');
        }
      });
    }
    
    function hideSimilarities() {
      const rows = document.querySelectorAll('.accordion-item table tbody tr');
      rows.forEach(row => {
        const cells = Array.from(row.querySelectorAll('td'))
          .map(cell => cell.textContent.trim())
          .filter(text => text !== 'â€”'); // Exclude cells with "â€”"
        const uniqueValues = [...new Set(cells)];
        if (uniqueValues.length === 1) {
          row.classList.add('hide-similarity');
        } else {
          row.classList.remove('hide-similarity');
        }
      });
    }
    
    function updateTable() {
      if (highlightCheckbox) {
        if (highlightCheckbox.checked) {
          highlightDifferences();
        } else {
          document.querySelectorAll('.highlight-difference').forEach(row => row.classList.remove('highlight-difference'));
        }
      }

      if (hideCheckbox) {
        if (hideCheckbox.checked) {
          hideSimilarities();
        } else {
          document.querySelectorAll('.hide-similarity').forEach(row => row.classList.remove('hide-similarity'));
        }
      }
    }

    if (highlightCheckbox) {
      highlightCheckbox.addEventListener('change', updateTable);
    }
    
    if (hideCheckbox) {
      hideCheckbox.addEventListener('change', updateTable);
    }

    // Initial call to set the states based on the current checkbox status
    updateTable();

    // Add event listener for comparison remove buttons
    document.querySelectorAll('.comparison-remove').forEach(button => {
      button.addEventListener('click', () => {        
        if (highlightCheckbox) {
          if (highlightCheckbox.checked) {
            highlightDifferences();
          }
        }

        if (hideCheckbox) {
          if (hideCheckbox.checked) {
            hideSimilarities();
          }
        }
      });
    });
  });
}

function reindexElements(parentElement, children) {
  const childElements = children ? children : Array.from(parentElement.children);
  
  childElements.forEach((child, index) => {
    child.dataset.index = index+1;
    /* Update any other relevant properties or attributes based on the new index */
  });
}

function removeElement(element) {
  const parentElement = element.parentElement;
  parentElement.removeChild(element);

  reindexElements(parentElement);
}

function handleCompareDrawer() {
  const drawerToggle = document.querySelector(".drawer-toggle");

  if (typeof (drawerToggle) != 'undefined' && drawerToggle != null) {

    const drawer = document.querySelector(".drawer");
    const drawerRemovers = drawer.querySelectorAll(".remove");
    const comaprisonItems = document.querySelector('.car-comparison-list');

    // Check if device width is greater than or equal to 992px
    const mq = window.matchMedia('(min-width: 992px)');

    /** 
      * Check if the media query matches
      * This is because drawer opens an offcanvas when the device width is <= 992px
      */
    if (mq.matches) {

      drawerToggle.addEventListener('click', function () {
        drawer.classList.toggle('drawer-expanded');
      });

      drawerRemovers.forEach((drawerRemover, i) => {
        drawerRemover.addEventListener('click', function () {
          const drawerItem = drawerRemover.closest('.compare-item');
          removeElement(drawerItem);
          removeComparisonItem(drawerItem.getAttribute('data-index'));
          // reindexElements(drawerRemover.closest('.car-comparison-list'));
          // console.log(drawerRemovers.length);
          drawerToggle.querySelector('.comparison-count').textContent = drawer.querySelectorAll(".remove").length;
        });
      });
    }
  }
}

function getObjectItemByEntryKey(data, entry, value) {
  for (let i = 0; i < data.length; i++) {
    if (data[i][entry] === value) {
      return data[i];
    }
  }
  return null; // Return null if item not found
}

const renderCarModelsOptions = async (selectElement, selectedValue) => {

  let carBrands = await fetchJSONFile('data/brands.json');

  const selectedItemObject = getObjectItemByEntryKey(carBrands, "name", selectedValue);

  const carModels = selectedItemObject.models;

  /* Remove all options except the first option */
  while (selectElement.options.length > 1) {
    selectElement.remove(1);
  }
  
  for (let i = 0; i < carModels.length; i++) {
    const carModel = carModels[i];

    /* Create an option element for each car model */
    const optionElement = document.createElement("option");
    optionElement.value = carModel;
    optionElement.textContent = carModel;

    /* Append the option element to the select element */
    selectElement.appendChild(optionElement);
  }
}

function handleCarBrandSelection(brandSelect, modelSelect) {
  
  if (typeof (brandSelect) != 'undefined' && brandSelect != null) {
    brandSelect.addEventListener("change", () => {
      
      const selectedValue = brandSelect.value;
      
      if (modelSelect) {
        renderCarModelsOptions(modelSelect, selectedValue);
      }
    });
  }
}

function handlePriceSlider(priceSliderElement) {

  const formatForSlider = {
    from: function (formattedValue) {
      return Number(formattedValue);
    },
    to: function (numericValue) {
      return '$' + parseInt(numericValue, 10)
    }
  };

  /* Stop in price element does not exist */
  if (typeof (priceSliderElement) == 'undefined' || priceSliderElement == null) return; 

  /* Stop in price attributes don't exist */
  if (!priceSliderElement.hasAttribute('data-start-min')) return;
  
  const startMin = parseInt(priceSliderElement.dataset.startMin);
  const startMax = parseInt(priceSliderElement.dataset.startMax);
  const priceMin = parseInt(priceSliderElement.dataset.min);
  const priceMax = parseInt(priceSliderElement.dataset.max);
  const priceStep = parseInt(priceSliderElement.dataset.step);
  
  noUiSlider.create(priceSliderElement, {
    start: startMax ? [startMin, startMax] : startMin,
    range: {
      'min': priceMin,
      'max': priceMax
    },
    step: priceStep,
    format: formatForSlider,
    connect: true,
    tooltips: true
  });

  const formatValues = [
    document.getElementById('price-min'),
    document.getElementById('price-max')
  ];

  priceSliderElement.noUiSlider.on('update', function (values, handle, unencoded) {
    formatValues[handle].value = values[handle];
  });
  
  // Listen to keydown events on the input field.
  formatValues.forEach(function (input, handle) {

    input.addEventListener('formFieldCleared', function(event) {
      priceSliderElement.noUiSlider.setHandle(handle, parseInt(this.value.replace(/[^\d.]/g, '')));
    });

    input.addEventListener('change', function () {
      priceSliderElement.noUiSlider.setHandle(handle, parseInt(this.value.replace(/[^\d.]/g, '')));
    });

    input.addEventListener('keydown', function (e) {

      var values = priceSliderElement.noUiSlider.get();
      var valueHandle = values[handle];
      var value = parseInt(valueHandle.replace(/[^\d.]/g, ''));

      // [[handle0_down, handle0_up], [handle1_down, handle1_up]]
      var steps = priceSliderElement.noUiSlider.steps();

      // [down, up]
      var step = steps[handle];

      var position;

      // 13 is enter,
      // 38 is key up,
      // 40 is key down.
      switch (e.which) {

        case 13:
          priceSliderElement.noUiSlider.setHandle(handle, parseInt(this.value.replace(/[^\d.]/g, '')));
          break;

        case 38:
        
          // Get step to go increase slider value (up)
          position = step[1];

          // false = no step is set
          if (position === false) {
            position = 1;
          }

          // null = edge of slider
          if (position !== null) {
            priceSliderElement.noUiSlider.setHandle(handle, value + position);
          }

          break;

        case 40:
        
          position = step[0];

          if (position === false) {
            position = 1;
          }

          if (position !== null) {
            priceSliderElement.noUiSlider.setHandle(handle, value - position);
          }

          break;
      }
    });
  });
}

function renderMinPriceOptions(priceSelectElements, maxPrice, minPrice, stepPrice) {
  
  priceSelectElements.forEach(priceSelectElement => {

    /* Remove all options except the first option */
    while (priceSelectElement.options.length > 1) {
      priceSelectElement.remove(1);
    }
    
    for (let price = minPrice; price <= maxPrice; price += stepPrice) {
      const option = document.createElement('option');
      option.value = price;
      option.text = '$'+price.toLocaleString();
      priceSelectElement.appendChild(option);
    }
    
    const optionLast = document.createElement('option');
    optionLast.value = maxPrice;
    optionLast.text = '$'+maxPrice.toLocaleString()+' >';
    priceSelectElement.appendChild(optionLast);
  })
}

function renderMaxPriceOptions(priceSelectElements, maxPrice, minPrice, stepPrice) {
  
  priceSelectElements.forEach(priceSelectElement => {

    /* Remove all options except the first option */
    while (priceSelectElement.options.length > 1) {
      priceSelectElement.remove(1);
    }
    
    const optionFirst = document.createElement('option');
    optionFirst.value = maxPrice;
    optionFirst.text = '$'+maxPrice.toLocaleString()+' >';
    priceSelectElement.appendChild(optionFirst);
    
    for (let price = maxPrice - stepPrice; price >= minPrice; price -= stepPrice) {
      const option = document.createElement('option');
      option.value = price;
      option.text = '$'+price.toLocaleString();
      priceSelectElement.appendChild(option);
    }
  })
}

/* Manage price select options whether active or disabled state */
function managePriceOptionsStatus() {
  const minPriceFilter = document.getElementById("min-price-filter");
  const maxPriceFilter = document.getElementById("max-price-filter");
  
  if (typeof (minPriceFilter) != 'undefined' && minPriceFilter != null) {

    minPriceFilter.addEventListener("change", () => {
      const selectedMinPrice = parseInt(minPriceFilter.value);
      /* Enable all options in the max price select */
      for (const option of maxPriceFilter.options) {
        option.disabled = false;
      }
      
      /* Disable options that are equal to or below the selected min price */
      for (const option of maxPriceFilter.options) {
        const value = parseInt(option.value);
        if (value < selectedMinPrice) {
          option.disabled = true;
        }
      }
    });
  }
}

function renderYearOptions() {
  const yearSelectElements = document.querySelectorAll('#min-year-filter, #max-year-filter');
  
  yearSelectElements.forEach(yearSelectElement => {
  
    /* Remove all options except the first option */
    while (yearSelectElement.options.length > 1) {
      yearSelectElement.remove(1);
    }
    
    for (let year = 2025; year >= 1960; year -= 1) {
      const option = document.createElement('option');
      option.value = year;
      option.text = year;
      yearSelectElement.appendChild(option);
    }
  })
}

/* Manage year select options whether active or disabled state */
function manageYearOptionsStatus() {
  const minYearFilter = document.getElementById("min-year-filter");
  const maxYearFilter = document.getElementById("max-year-filter");
  
  if (typeof (minYearFilter) != 'undefined' && minYearFilter != null) {

    minYearFilter.addEventListener("change", () => {
      const selectedMinYear = parseInt(minYearFilter.value);
      
      /* Enable all options in the max year select */
      for (const option of maxYearFilter.options) {
        option.disabled = false;
      }
      
      /* Disable options that are equal to or below the selected min year */
      for (const option of maxYearFilter.options) {
        const value = parseInt(option.value);
        if (value < selectedMinYear) {
          option.disabled = true;
        }
      }
    });
  }
}

function renderMinMileageOptions(mileageSelectElements, maxMileage, minMileage, stepMileage) {
  
  mileageSelectElements.forEach(mileageSelectElement => {

    /* Remove all options except the first option */
    while (mileageSelectElement.options.length > 1) {
      mileageSelectElement.remove(1);
    }
    
    for (let mileage = minMileage; mileage <= maxMileage; mileage += stepMileage) {
      const option = document.createElement('option');
      option.value = mileage;
      option.text = mileage.toLocaleString();
      mileageSelectElement.appendChild(option);
    }
    
    const optionLast = document.createElement('option');
    optionLast.value = maxMileage;
    optionLast.text = maxMileage.toLocaleString()+' >';
    mileageSelectElement.appendChild(optionLast);
  })
}

function renderMaxMileageOptions(mileageSelectElements, maxMileage, minMileage, stepMileage) {
  
  mileageSelectElements.forEach(mileageSelectElement => {

    /* Remove all options except the first option */
    while (mileageSelectElement.options.length > 1) {
      mileageSelectElement.remove(1);
    }
    
    const optionFirst = document.createElement('option');
    optionFirst.value = maxMileage;
    optionFirst.text = maxMileage.toLocaleString()+' >';
    mileageSelectElement.appendChild(optionFirst);
    
    for (let mileage = maxMileage - stepMileage; mileage >= minMileage; mileage -= stepMileage) {
      const option = document.createElement('option');
      option.value = mileage;
      option.text = mileage.toLocaleString();
      mileageSelectElement.appendChild(option);
    }
  })
}

/* Manage mileage select options whether active or disabled state */
function manageMileageOptionsStatus() {
  const minMileageFilter = document.getElementById("min-mileage-filter");
  const maxMileageFilter = document.getElementById("max-mileage-filter");
  
  if (typeof (minMileageFilter) != 'undefined' && minMileageFilter != null) {

    minMileageFilter.addEventListener("change", () => {
      const selectedMinMileage = parseInt(minMileageFilter.value);
      /* Enable all options in the max mileage select */
      for (const option of maxMileageFilter.options) {
        option.disabled = false;
      }
      
      /* Disable options that are equal to or below the selected min mileage */
      for (const option of maxMileageFilter.options) {
        const value = parseInt(option.value);
        if (value < selectedMinMileage) {
          option.disabled = true;
        }
      }
    });
  }
}

function handleNavMultiLevel() {

  /* Prevent closing from clicking inside dropdown */
  document.querySelectorAll('.dropdown-menu').forEach(function (element) {
    element.addEventListener('click', function (e) {
      e.stopPropagation();
    });
  });

  if (window.innerWidth < 992) {

    /* Close all child dropdowns when parent is closed */
    document.querySelectorAll('.navbar .dropdown').forEach(function (everydropdown) {
      everydropdown.addEventListener('hidden.bs.dropdown', function () {
        this.querySelectorAll('.dropdown-menu').forEach(function (everysubmenu) {
          everysubmenu.style.display = 'none';
        });
      })
    });

    document.querySelectorAll('.dropdown-menu a').forEach(function (element) {
      element.addEventListener('click', function (e) {

        let nextEl = this.nextElementSibling;

        if (nextEl && nextEl.classList.contains('dropdown-menu')) {
          
          /* Don't open link */
          e.preventDefault();
          
          nextEl.style.display = nextEl.style.display == 'block' ? 'none' : 'block';
        }
      });
    });
  }
}

function handleImageUploadError(msg) {
  
  const errorModal = document.getElementById('errorModal');

  if (errorModal) {
    errorModal.addEventListener('show.bs.modal', event => {
      
      const modalBody = errorModal.querySelector('.modal-body')

      modalBody.innerHTML = `<div class="alert alert-danger m-4" role="alert">${msg}</div>`;
    })
  }

  document.getElementById('error-modal-trigger').dispatchEvent(cmClick);
}

function handleListingImageUpload() {

  const numberOfUploadFields = 14; // Define the number of file upload fields

  for (let i = 1; i <= numberOfUploadFields; i++) {
    const imageUpload = document.getElementById(`uploadImage${i}`);
    const previewImage = document.getElementById(`previewImage${i}`);

    if (imageUpload && previewImage) {
      imageUpload.addEventListener('change', function () {
        const file = this.files[0];

        if (file) {
          const allowedExtensions = ['png', 'jpg', 'jpeg']; 
          const allowedRegex = new RegExp(allowedExtensions.join('|'));

          /* Check file type */
          if (!allowedRegex.test(file.type)) {
            handleImageUploadError(`Invalid file type. We only accept <b>.${allowedExtensions.join(', .').toUpperCase()}</b>.`);
            return;
          }
          
          /* Check file size */
          if (file.size > 5*1000*1024) { 
            handleImageUploadError('Image size must not be more than 5 MB.');
            return;
          }
          
          const reader = new FileReader();
          
          reader.onload = function (e) {
            // previewImage.src = e.target.result;
            // previewImage.style.display = 'block';
            previewImage.style.display = 'block';
            previewImage.style.backgroundImage = 'url(' + e.target.result + ')';
            previewImage.style.backgroundPosition = 'center center';
            previewImage.style.backgroundSize = 'cover';
            previewImage.parentNode.classList.remove('border-2');
            previewImage.parentNode.classList.add('border-1');
            previewImage.parentNode.style.setProperty('--bs-border-style', 'solid');
          };

          reader.readAsDataURL(file);
        } else {
          previewImage.src = '';
          previewImage.removeAttribute('style');
          previewImage.style.display = 'none';
        }
      });

      // Remove image and reset upload box
      previewImage.addEventListener('click', () => {
        previewImage.removeAttribute('style');
        previewImage.parentNode.classList.remove('border-1');
        previewImage.parentNode.classList.add('border-2');
        previewImage.parentNode.style.setProperty('--bs-border-style', 'dashed');
      });
    }
  }
}

function handleVideoUpload() {

  const numberOfUploadFields = 4; // Define the number of file upload fields

  for (let i = 1; i <= numberOfUploadFields; i++) {
    const videoUpload = document.getElementById(`uploadVideos${i}`);
    const previewVideo = document.getElementById(`previewVideo${i}`);
    
    if (videoUpload && previewVideo) {
      videoUpload.addEventListener('change', function () {
        const videoUploadBox = this.parentElement;
        
        const file = this.files[0];

        if (file) {
          const allowedExtensions = ['mp4', 'webm'];
          const allowedRegex = new RegExp(allowedExtensions.join('|'));

          /* Check file type */
          if (!allowedRegex.test(file.type)) {
            alert(`Invalid file type. We only accept .${allowedExtensions.join(', .').toUpperCase()}`);
            return;
          }

          /* Check file size (optional, example with 20MB limit) */
          if (file.size > 20 * 1000 * 1024) {
            alert('Video size must not be more than 20 MB.');
            return;
          }

          const videoElement = document.createElement('video');
          videoElement.src = URL.createObjectURL(file);
          videoElement.controls = false;
          videoElement.style.width = '100%';
          videoElement.style.height = '100%';
          videoElement.style.objectFit = 'cover';

          videoUploadBox.querySelector('.upload-icon').style.display = 'none';
          videoUploadBox.querySelector('.upload-text').style.display = 'none';

          // previewVideo.innerHTML = '';
          previewVideo.style.display = 'flex';
          previewVideo.appendChild(videoElement);
          previewVideo.parentNode.classList.remove('border-2');
          previewVideo.parentNode.classList.add('border-1');
          previewVideo.parentNode.style.setProperty('--bs-border-style', 'solid');
          // previewVideo.appendChild(removeBtn);
          // removeBtn.style.display = 'block'; // Show the remove button
        } else {
          previewVideo.innerHTML = '';
        }
      });
      
      // Remove video and reset upload box
      previewVideo.addEventListener('click', () => {
        
        const videoUploadBox = previewVideo.parentElement;

        videoUploadBox.querySelector('.upload-icon').style.display = 'block';
        videoUploadBox.querySelector('.upload-text').style.display = 'block';

        previewVideo.querySelector('video').remove();
        
        previewVideo.removeAttribute('style');
        previewVideo.parentNode.classList.remove('border-1');
        previewVideo.parentNode.classList.add('border-2');
        previewVideo.parentNode.style.setProperty('--bs-border-style', 'dashed');
      });
    }
  }

  function removeVideo(index) {
    const preview = document.getElementById(`previewVideo${index}`);
    preview.innerHTML = ''; // Clear the preview
    const input = document.getElementById(`uploadVideos${index}`);
    input.value = ''; // Reset the input field
  }
}

function handleAddVideoUrl() {

  document.addEventListener('DOMContentLoaded', function () {
    const addVideoUrlBtn = document.getElementById('add-listing-video-url');

    if (!addVideoUrlBtn) return;
    
      addVideoUrlBtn.addEventListener('click', function () {

        const videoUrls = addVideoUrlBtn.previousElementSibling;
        
        if (!videoUrls || !videoUrls.classList.contains('extra-features-fields')) return;
        
          const newInput = document.createElement('div');
          newInput.classList.add('col-12', 'col-md-6');
  
          newInput.innerHTML = `
            <div class="input-group mb-4">
              <input type="text" class="form-control custom-color" name="${videoUrls.dataset.inputName}[]" placeholder="Enter video URL">
              <button class="btn btn-outline-primary remove-button custom-color" type="button">Remove</button>
            </div>
          `;
            
          videoUrls.appendChild(newInput);                                  
      });
      
    document.addEventListener('click', function (event) {
      if (event.target && event.target.classList.contains('remove-button')) {
        var inputGroup = event.target.closest('.col-12');
        if (inputGroup) {
          inputGroup.remove();
        }
      }
    });
  });
}

function handleLoanCalculator() {

  const loanForm = document.getElementById('loan-calculator-form');

  if (!loanForm) {
    return
  }
  
  /* Handle the loan term type selection */
  const termTypeBtn = loanForm.querySelector('.term-type-btn');
  const termTypes = loanForm.querySelectorAll('.term-type');
  const termTypeInput = loanForm.querySelector('#termType');

  termTypes.forEach(termT => {
    termT.addEventListener('click', () => {
      const termType = termT.getAttribute('data-term-type');
      termTypeBtn.innerHTML = termType.charAt(0).toUpperCase() + termType.slice(1);
      termTypeInput.value = termType; // Set the value in the hidden input
      termT.parentNode.classList.remove('show'); // Close dropdown after selection
    });
  });
  
  /* Handle the loan currency selection */
  const loanCurrencyBtns = loanForm.querySelectorAll('.loan-currency-btn');
  const loanCurrencies = loanForm.querySelectorAll('.loan-currency');
  const loanCurrencyInput = loanForm.querySelector('#loanCurrency');

  loanCurrencies.forEach(currency => {
    currency.addEventListener('click', () => {
      const loanCurrency = currency.getAttribute('data-loan-currency');
      loanCurrencyBtns.forEach(btn => {
        btn.innerHTML = loanCurrency;
      });
      loanCurrencyInput.value = loanCurrency; // Set the value in the hidden input
      currency.parentNode.classList.remove('show'); // Close dropdown after selection
    });
  });

  loanForm.addEventListener('submit', function (e) {
    
    e.preventDefault();

    const results = document.querySelector('.loan-calculator-results');

    if (!results) {
      console.error('Error:', 'Results container is missing');
      return
    }
    
    if (!this.checkValidity()) {
      results.classList.add('d-none')
      return
    }

    const carPrice = parseFloat(this.querySelector('#carPrice').value);
    const downPayment = parseFloat(this.querySelector('#downPayment').value);
    const tradeInValue = parseFloat(this.querySelector('#tradeInValue').value);
    const interestRate = parseFloat(this.querySelector('#interestRate').value) / 100;
    const loanTerm = parseInt(this.querySelector('#loanTerm').value);
    const termType = this.querySelector('#termType').value;
    const currecncySymbol = this.querySelector('#loanCurrency').value;
    
    /* Calculate total amount financed */
    const totalAmountFinanced = carPrice - (downPayment + tradeInValue);

    /* Calculate total payments (number of payments) */
    const totalPayments = (termType === 'months' ? loanTerm : loanTerm * 12);

    /* Calculate monthly payments */
    const monthlyInterestRate = interestRate / (termType === 'months' ? 12 : loanTerm);
    const monthlyPayments = (totalAmountFinanced * monthlyInterestRate) / (1 - Math.pow(1 + monthlyInterestRate, -(termType === 'months' ? loanTerm : loanTerm * 12)));
    const yearlyPayments = monthlyPayments * 12;

    /* Display results */
    document.getElementById('totalAmountFinanced').textContent = currecncySymbol + totalAmountFinanced.toFixed(2);
    document.getElementById('totalPayments').textContent = totalPayments;
    document.getElementById('monthlyPayments').textContent = currecncySymbol + monthlyPayments.toFixed(2);
    document.getElementById('yearlyPayments').textContent = currecncySymbol + yearlyPayments.toFixed(2);

    results.classList.remove('d-none');
  });
}

function handleOwnersReview() {

  /* YES votes */
  document.querySelectorAll('#vote-yes').forEach(voteBtn => {
    voteBtn.addEventListener('click', (e) => {

      const reviewItem = voteBtn.closest('[id^="review-id-"]');
      
      /* Decrement if already clicked */
      if (voteBtn.classList.contains('active')) {
        reviewItem.querySelector('.reviewer-votes-count').innerText--;
        reviewItem.querySelector('#vote-yes-count').innerText--;
        voteBtn.classList.remove('active');
        return;
      }
      
      /* Increment YES votes */
      reviewItem.querySelector('.reviewer-votes-count').innerText++;
      reviewItem.querySelector('#vote-yes-count').innerText++;

      const voteNo = reviewItem.querySelector('#vote-no');
      
      /* Decrement NO votes */
      if (voteNo.classList.contains('active')) {
        voteNo.classList.remove('active');
        reviewItem.querySelector('#vote-no-count').innerText--;
      }

      voteBtn.classList.add('active');
    })
  })
  
  /* NO votes */
  document.querySelectorAll('#vote-no').forEach(voteBtn => {
    voteBtn.addEventListener('click', (e) => {

      const reviewItem = voteBtn.closest('[id^="review-id-"]');
      
      /* Decrement if already clicked */
      if (voteBtn.classList.contains('active')) {
        reviewItem.querySelector('#vote-no-count').innerText--;
        voteBtn.classList.remove('active');
        return;
      }
      
      /* Increment NO votes */
      reviewItem.querySelector('#vote-no-count').innerText++;

      const voteYes = reviewItem.querySelector('#vote-yes');

      /* Decrement YES votes */
      if (voteYes.classList.contains('active')) {
        voteYes.classList.remove('active');
        reviewItem.querySelector('.reviewer-votes-count').innerText--;
        reviewItem.querySelector('#vote-yes-count').innerText--;
      }
      
      voteBtn.classList.add('active');
    })
  })
}

function generateVendorStarRating(rating, container) {
  const fullStar = '<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-star-filled" width="22" height="22" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M8.243 7.34l-6.38 .925l-.113 .023a1 1 0 0 0 -.44 1.684l4.622 4.499l-1.09 6.355l-.013 .11a1 1 0 0 0 1.464 .944l5.706 -3l5.693 3l.1 .046a1 1 0 0 0 1.352 -1.1l-1.091 -6.355l4.624 -4.5l.078 -.085a1 1 0 0 0 -.633 -1.62l-6.38 -.926l-2.852 -5.78a1 1 0 0 0 -1.794 0l-2.853 5.78z" stroke-width="0" fill="currentColor" /></svg>';
  const halfStar = '<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-star-half-filled" width="22" height="22" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 1a.993 .993 0 0 1 .823 .443l.067 .116l2.852 5.781l6.38 .925c.741 .108 1.08 .94 .703 1.526l-.07 .095l-.078 .086l-4.624 4.499l1.09 6.355a1.001 1.001 0 0 1 -1.249 1.135l-.101 -.035l-.101 -.046l-5.693 -3l-5.706 3c-.105 .055 -.212 .09 -.32 .106l-.106 .01a1.003 1.003 0 0 1 -1.038 -1.06l.013 -.11l1.09 -6.355l-4.623 -4.5a1.001 1.001 0 0 1 .328 -1.647l.113 -.036l.114 -.023l6.379 -.925l2.853 -5.78a.968 .968 0 0 1 .904 -.56zm0 3.274v12.476a1 1 0 0 1 .239 .029l.115 .036l.112 .05l4.363 2.299l-.836 -4.873a1 1 0 0 1 .136 -.696l.07 -.099l.082 -.09l3.546 -3.453l-4.891 -.708a1 1 0 0 1 -.62 -.344l-.073 -.097l-.06 -.106l-2.183 -4.424z" stroke-width="0" fill="currentColor" /></svg>';
  const emptyStar = '<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-star" width="22" height="22" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z" /></svg>';

  const fullStarsCount = Math.floor(rating);
  const hasHalfStar = rating - fullStarsCount >= 0.5;

  let starsHtml = '';
  for (let i = 0; i < 5; i++) {
      if (i < fullStarsCount) {
          starsHtml += fullStar;
      } else if (hasHalfStar && i === fullStarsCount) {
          starsHtml += halfStar;
      } else {
          starsHtml += emptyStar;
      }
  }

  container.innerHTML = starsHtml;
}

function handleVendorPhoneReveal() {
  var fullPhoneNumber = "+1 800 123 4567"; // Your full phone number here
  var buttonElement = document.querySelector("#revealButton .phone-number");
  if (buttonElement) {
    buttonElement.textContent = fullPhoneNumber.trim().substring(0, 7) + '*** ****';
  
    buttonElement.addEventListener('click', function() {
      buttonElement.textContent = fullPhoneNumber;
    })
  }
}

function handleCopyButton() {

  const copyBtn = document.querySelector('.copy-btn');

  if (copyBtn) {
    copyBtn.onclick = (event) => {

      event.preventDefault();

      const wrapper = copyBtn.closest('.copy-field-wrapper')
      
      if (!wrapper) {
        console.error('Error:', 'Missing copy wrapper');
        return
      }

      const copyField = wrapper.querySelector('input, textarea')
      
      copyField.select(); //select input value
      if (document.execCommand("copy")) { //if the selected text is copied
        wrapper.classList.add("active");
        copyBtn.innerText = "Copied";
        setTimeout(() => {
          window.getSelection().removeAllRanges(); //remove selection from page
          wrapper.classList.remove("active");
          copyBtn.innerText = "Copy";
        }, 3000);
      }
    }
  }
}

function handleDashTrafficChart() {

  // Create an array with numbers from 1 to 30 as strings
  const datesArray = Array.from({ length: 30 }, (_, index) => (index + 1).toString());

  const length = datesArray.length; // Length of the array
  const [pageViews, phoneViews] = [[], []];

  for (let i = 0; i < length; i++) {
    pageViews.push(Math.floor(Math.random() * (110 - 65 + 1)) + 65); // max 110, min 65
  }

  for (let i = 0; i < length; i++) {
    phoneViews.push(Math.floor(Math.random() * (63 - 38 + 1)) + 38); // max 63, min 38
  }

  var options = {
    series: [{
      name: 'Page Views',
      data: pageViews
    }, {
      name: 'Phone Views',
      data: phoneViews
    }],
      chart: {
      height: 350,
      type: 'area',
      fontFamily: 'Antonio, sans-serif',
      fontWeight: '300',
      type: 'area',
      toolbar: {
          show: true
      }
    },
    legend: {
        show: true
    },
    dataLabels: {
      enabled: false
    },
    stroke: {
      curve: 'smooth',
      show: true,
      width: 3,
      // colors: ['#fde', '#f21', '#dea', '#ed3']
    },
    xaxis: {
      // type: 'datetime',
      categories: datesArray
    },
    tooltip: {
      x: {
        // format: 'dd/MM/yy HH:mm'
        // format: 'dd/MM/yy HH:mm'
      },
    },
    // colors: ['#fde', '#f21', '#dea', '#ed3'],
    fill: {
      type: "gradient",
      gradient: {
        shadeIntensity: 1,
        opacityFrom: 0.5,
        opacityTo: 0.25,
        stops: [10, 90, 100]
      }
    },
    // markers: {
    //     size: 1,
    //     // strokeColor: ['#fde', '#f21', '#dea', '#ed3'],
    //     strokeWidth: 7,
    //     strokeOpacity: 0.8,
    // }
  };

  if (typeof ApexCharts !== 'undefined') {
    
    const trafficChart = document.querySelector("#traffic-chart");

    if (!trafficChart) return;

    var chart = new ApexCharts(trafficChart, options);
    
    chart.render();

    const trafficChartSelect = document.getElementById('traffic-chart-select');

    if (trafficChartSelect) {
      trafficChartSelect.addEventListener('change', function () {
        
        var period = $(this).val();
        let [pageViewsData, phoneViewsData, xaxisLabels] = [[], [], ""];

        switch (period) {
          case 'today':
            pageViewsData = [30, 40, 35, 50, 49, 60, 70, 91, 125, 47, 17, 69];
            for (let i = 0; i < 12; i++) {
              phoneViewsData.push(Math.floor(Math.random() * (63 - 38 + 1)) + 38); // max 63, min 38
            }
            xaxisLabels = getLabels('today');
            break;
          case 'yesterday':
            const yesterdayPageDataArray = [];
            const yesterdayPhoneDataArray = [];
            for (var i = 1; i <= 12; i++) { // 12 - hours
              yesterdayPageDataArray.push(Math.floor(Math.random() * (145 - 60 + 1)) + 60); // max 145, min 60
              yesterdayPhoneDataArray.push(Math.floor(Math.random() * (145 - 60 + 1)) + 60); // max 145, min 60
            }
            pageViewsData = yesterdayPageDataArray;
            phoneViewsData = yesterdayPhoneDataArray;
            xaxisLabels = getLabels('yesterday');
            break;
          case 'last7days':
            const last7DaysPageDataArray = [];
            const last7DaysPhoneDataArray = [];
            for (var i = 1; i <= 7; i++) { // 7 - days
              last7DaysPageDataArray.push(Math.floor(Math.random() * (678 - 214 + 1)) + 214); // max 678, min 214
              last7DaysPhoneDataArray.push(Math.floor(Math.random() * (678 - 214 + 1)) + 214); // max 678, min 214
            }
            pageViewsData = last7DaysPageDataArray;
            phoneViewsData = last7DaysPhoneDataArray;
            xaxisLabels = getLabels('last7days');
            break;
          case 'lastweek':
            const lastWeekPageDataArray = [];
            const lastWeekPhoneDataArray = [];
            for (var i = 1; i <= 7; i++) { // 7 - days
              lastWeekPageDataArray.push(Math.floor(Math.random() * (678 - 214 + 1)) + 214); // max 678, min 214
              lastWeekPhoneDataArray.push(Math.floor(Math.random() * (678 - 214 + 1)) + 214); // max 678, min 214
            }
            pageViewsData = lastWeekPageDataArray;
            phoneViewsData = lastWeekPhoneDataArray;
            xaxisLabels = getLabels('lastweek');
            break;
          case 'last30days':
            const last30DaysPageDataArray = [];
            const last30DaysPhoneDataArray = [];
            var currentDate = new Date();
            var daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
            for (var i = 1; i <= daysInMonth; i++) {
              last30DaysPageDataArray.push(Math.floor(Math.random() * (110 - 65 + 1)) + 65); // max 110, min 65
              last30DaysPhoneDataArray.push(Math.floor(Math.random() * (110 - 65 + 1)) + 65); // max 110, min 65
            }
            pageViewsData = last30DaysPageDataArray;
            phoneViewsData = last30DaysPhoneDataArray;
            xaxisLabels = getLabels('last30days');
            break;
          case 'lastmonth':
            const monthPageDataArray = [];
            const monthPhoneDataArray = [];
            var currentDate = new Date();
            var daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
            for (var i = 1; i <= daysInMonth; i++) {
              monthPageDataArray.push(Math.floor(Math.random() * (110 - 65 + 1)) + 65); // max 110, min 65
              monthPhoneDataArray.push(Math.floor(Math.random() * (110 - 65 + 1)) + 65); // max 110, min 65
            }
            pageViewsData = monthPageDataArray;
            phoneViewsData = monthPhoneDataArray;
            xaxisLabels = getLabels('lastmonth');
            break;
          case 'last6months':
            const last6MonthsPageDataArray = [];
            const last6MonthsPhoneDataArray = [];
            for (var i = 1; i <= 6; i++) { // 6 - months
              last6MonthsPageDataArray.push(Math.floor(Math.random() * (150 - 100 + 1)) + 100); // max 150, min 100
              last6MonthsPhoneDataArray.push(Math.floor(Math.random() * (150 - 100 + 1)) + 100); // max 150, min 100
            }
            pageViewsData = last6MonthsPageDataArray;
            phoneViewsData = last6MonthsPhoneDataArray;
            xaxisLabels = getLabels('last6months');
            break;
          case 'last12months':
            const last12MonthsPageDataArray = [];
            const last12MonthsPhoneDataArray = [];
            for (var i = 1; i <= 12; i++) { // 12 - months
              last12MonthsPageDataArray.push(Math.floor(Math.random() * (1897 - 963 + 1)) + 963); // max 1897, min 963
              last12MonthsPhoneDataArray.push(Math.floor(Math.random() * (1897 - 963 + 1)) + 963); // max 1897, min 963
            }
            pageViewsData = last12MonthsPageDataArray;
            phoneViewsData = last12MonthsPhoneDataArray;
            xaxisLabels = getLabels('last12months');
            break;
          case 'lastyear':
            const yearPageDataArray = [];
            const yearPhoneDataArray = [];
            for (var i = 1; i <= 12; i++) { // 12 - months
              yearPageDataArray.push(Math.floor(Math.random() * (1897 - 963 + 1)) + 963); // max 1897, min 963
              yearPhoneDataArray.push(Math.floor(Math.random() * (1897 - 963 + 1)) + 963); // max 1897, min 963
            }
            pageViewsData = yearPageDataArray;
            phoneViewsData = yearPhoneDataArray;
            xaxisLabels = getLabels('lastyear');
            break;
        }

        chart.updateOptions({
          xaxis: {
            categories: xaxisLabels
          }
        });
        chart.updateSeries([{
          data: pageViewsData
        }, {
          data: phoneViewsData
        }]);
      });
    }
    
    function getLabels(period) {
      var labels = [];

      switch (period) {
        case 'today':
          var currentDate = new Date();
          var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
          var hours = [];
          for (var i = currentDate.getHours() - 24; i <= currentDate.getHours(); i += 2) {
            var tempDate = new Date(); // Create a temporary date object
            tempDate.setHours(i); // Set the hour for the temporary date
            var formattedHour = ((i + 24) % 24 < 10 ? '0' : '') + ((i + 24) % 24) +
            ':00'; // Formatting hours as HH:00
            var day = days[tempDate.getDay()]; // Fetch day name for the specific hour
            hours.push(day + ' ' + formattedHour);
          }
          labels = hours;
          break;
          
        case 'yesterday':
          var currentDate = new Date();
          currentDate.setDate(currentDate.getDate() - 1); // Subtract one day to get yesterday
          var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
          var hours = [];
          for (var i = 0; i < 24; i += 2) {
            var formattedHour = (i < 10 ? '0' : '') + i + ':00'; // Formatting hours as HH:00
            var day = days[currentDate.getDay()];
            hours.push(day + ' ' + formattedHour);
          }
          labels = hours;
          break;
          
        case 'last7days':
          var currentDate = new Date();
          var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
          for (var i = 6; i >= 0; i--) {
            var prevDate = new Date(currentDate);
            prevDate.setDate(prevDate.getDate() - i);
            var day = days[prevDate.getDay()];
            var date = prevDate.getDate();
            labels.push(day + ' ' + date);
          }
          break;

        case 'lastweek':
          var currentDate = new Date();
          var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
          for (var i = 6; i >= 0; i--) {
            var prevDate = new Date(currentDate);
            prevDate.setDate(prevDate.getDate() - 7 - i); // Subtract 7 days to get last week
            var day = days[prevDate.getDay()];
            var date = prevDate.getDate();
            labels.push(day + ' ' + date);
          }
          break;

        case 'last30days':
          var currentDate = new Date();
          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          for (var i = 30; i > 0; i--) {
            var prevDate = new Date(currentDate);
            prevDate.setDate(prevDate.getDate() - i);
            var monthIndex = prevDate.getMonth();
            labels.push(prevDate.getDate() + ' ' + months[monthIndex]);
          }
          labels.push(currentDate.getDate() + ' ' + months[currentDate.getMonth()]); // Add current day label
          break;

        case 'lastmonth':
          var currentDate = new Date();
          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
          'Dec']; // Define months array
          var prevMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
          var lastDayPrevMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0).getDate();
          var firstDayPrevMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1).getDate();
          var monthIndex = prevMonthDate.getMonth();
          var monthName = months[monthIndex];

          for (var i = firstDayPrevMonth; i <= lastDayPrevMonth; i++) {
            labels.push(i + ' ' + monthName);
          }
          break;
          
        case 'last6months':
          var currentDate = new Date();
          var currentYear = currentDate.getFullYear();
          var currentMonth = currentDate.getMonth();
          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          for (var i = 6; i > 0; i--) {
            var monthIndex = (currentMonth - i + 12) % 12; // Adjusting for looping from Dec to Jan
            var year = currentYear;
            if (monthIndex > currentMonth) {
              year -= 1; // Decrement year for past months
            }
            labels.push(months[monthIndex] + ' ' + year);
          }
          labels.push(months[currentMonth] + ' ' + currentYear); // Add current month label
          break;

        case 'last12months':
          var currentDate = new Date();
          var currentYear = currentDate.getFullYear();
          var currentMonth = currentDate.getMonth();
          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          for (var i = 12; i > 0; i--) {
            var monthIndex = (currentMonth - i + 12) % 12; // Adjusting for looping from Dec to Jan
            var year = currentYear;
            if (i > currentMonth) {
              year -= 1; // Decrement year for past months
            }
            labels.push(months[monthIndex] + ' ' + year);
          }
          labels.push(months[currentMonth] + ' ' + currentYear); // Add current month label
          break;

        case 'lastyear':
          var currentDate = new Date();
          var currentYear = currentDate.getFullYear() - 1; // Get the previous year
          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

          // Iterate over each month of the previous year
          for (var i = 0; i < 12; i++) {
            labels.push(currentYear + ' ' + months[i]); // Add yearName month label
          }
          break;

      }

      return labels;
    }
    
  
  }
}

function handleDashEngagementChart() {

  // Create an array with numbers from 1 to 30 as strings
  const datesArray = Array.from({ length: 30 }, (_, index) => (index + 1).toString());

  const length = datesArray.length; // Length of the array
  const [messages, reviews] = [[], []];
  
  for (let i = 0; i < length; i++) {
    messages.push(Math.floor(Math.random() * (55 - 31 + 1)) + 31); // max 55, min 31
  }

  for (let i = 0; i < length; i++) {
    reviews.push(Math.floor(Math.random() * (28 - 12 + 1)) + 12); // max 28, min 12
  }

  var options = {
    series: [{
      name: 'Messages',
      data: messages
    }, {
      name: 'Reviews',
      data: reviews
    }],
      chart: {
      height: 350,
      type: 'area',
      fontFamily: 'Antonio, sans-serif',
      fontWeight: '400',
      type: 'area',
      toolbar: {
          show: true
      }
    },
    legend: {
        show: true
    },
    dataLabels: {
      enabled: false
    },
    stroke: {
      curve: 'smooth',
      show: true,
      width: 3,
      // colors: ['#fde', '#f21', '#dea', '#ed3']
    },
    xaxis: {
      // type: 'datetime',
      categories: datesArray
    },
    tooltip: {
      x: {
        // format: 'dd/MM/yy HH:mm'
        // format: 'dd/MM/yy HH:mm'
      },
    },
    // colors: ['#fde', '#f21', '#dea', '#ed3'],
    fill: {
      type: "gradient",
      gradient: {
        shadeIntensity: 1,
        opacityFrom: 0.5,
        opacityTo: 0.25,
        stops: [10, 90, 100]
      }
    },
    // markers: {
    //     size: 1,
    //     // strokeColor: ['#fde', '#f21', '#dea', '#ed3'],
    //     strokeWidth: 7,
    //     strokeOpacity: 0.8,
    // }
  };

  if (typeof ApexCharts !== 'undefined') {
    
    const engagementChart = document.querySelector("#engagement-chart");

    if (!engagementChart) return;

    var chart = new ApexCharts(document.querySelector("#engagement-chart"), options);
    chart.render();
  }
}

function formatTimestamp(timestamp, type) {
  // Create a Date object from the timestamp
  var date = new Date(timestamp);

  // Get the day, month, year, hours, and minutes from the Date object
  var day = date.getDate();
  var month = date.toLocaleString('default', { month: 'short' });
  var year = date.getFullYear();
  var hours = date.getHours();
  var minutes = date.getMinutes();

  // Convert hours to 12-hour format and determine AM/PM
  var period = hours < 12 ? 'AM' : 'PM';
  hours = hours % 12 || 12; // Convert 0 to 12

  // Add leading zero to minutes if needed
  minutes = minutes < 10 ? '0' + minutes : minutes;

  // Construct the formatted date and time strings based on the type parameter
  if (type === 'date') {
    return day + ' ' + month + ', ' + year;
  } else if (type === 'time') {
    return hours + ':' + minutes + ' ' + period;
  } else {
    // Return null if the type parameter is invalid
    return null;
  }
}

function handleChatDateAndTime() {
  const chatDates = document.querySelectorAll('.chat-date')
  
  if (chatDates) {
    chatDates.forEach(chatDate => {
      const timestamp = chatDate.dataset.timestamp;
      chatDate.innerHTML = formatTimestamp(timestamp, 'date')
    });
  }

  const chatTimes = document.querySelectorAll('.chat-time')
  
  if (chatTimes) {
    chatTimes.forEach(chatTime => {
      const timestamp = chatTime.dataset.timestamp;
      chatTime.innerHTML = formatTimestamp(timestamp, 'time')
    });
  }
}

function handleChatTabClick() {
  const chatListItems = document.querySelectorAll('.chat-list .chat-item .stretched-link')

  if (!chatListItems) return;
  
  chatListItems.forEach(chatListItem => {
    chatListItem.addEventListener('click', function(e) {
      e.preventDefault(); // Prevent default anchor action

      // Trigger click event on the next link sibling if it exists
      var sibling = this.nextElementSibling;
      if (sibling) {
          sibling.click();
      }

      // Simulate offcnvas operation after a few seconds
      setTimeout(function() {

        // Get the value of the data-offcanvas-target attribute
        var offcanvasTarget = chatListItem.dataset.offcanvasTarget;

        // Retrieve the offcanvas element using the target
        var offcanvasElement = document.querySelector(offcanvasTarget);
        
        var offcanvas = new bootstrap.Offcanvas(offcanvasElement);
        offcanvas.show();

      }, 300);
    });
  });
}

function handleChatFormTextareaAutoresize() {
  const textareas = document.querySelectorAll('.chat-footer textarea.form-control');

  if (!textareas) return;

  textareas.forEach(textarea => {

    function autoResize() {
      // Start from the minimum height to ensure proper scrollHeight calculation
      textarea.style.height = '38px'; // Minimum height
      
      // Calculate the height for three rows - change the multiplier based on your specific line-height
      const lineHeight = parseInt(window.getComputedStyle(textarea).lineHeight);
      const paddingVertical = parseInt(window.getComputedStyle(textarea).paddingTop) + parseInt(window.getComputedStyle(textarea).paddingBottom);
      const threeRowsHeight = 3 * lineHeight + paddingVertical;

      // Determine necessary height but ensure it's not below 38px and does not exceed three rows height
      const requiredHeight = Math.max(textarea.scrollHeight, 38);
      const finalHeight = Math.min(requiredHeight, threeRowsHeight);

      // Apply the computed height to the textarea
      textarea.style.height = finalHeight + 'px';
    }

    // Event listener for input events
    textarea.addEventListener('input', autoResize);

    // Initialize the textarea size on page load
    autoResize();
  });
}

function handleChatMsgEntry() {

  function sendChatMsg(chatForm) {

    const chatWrapper = chatForm.closest('.chat-wrapper')
    const messageEntry = chatForm.querySelector('#chat-msg-entry');
    let message = messageEntry.value;

    // Replace line breaks with <br> tags
    message = message.replace(/\n/g, '<br>');

    if (/\S/.test(message)) {
      const html = `
        <div class="chat-bubble d-flex mt-1 fs-6">
          <div class="chat-bubble-text d-inline-block text-body-secondary bg-body-tertiary rounded p-2 px-3 custom-color">
            <span>${message}</span>
          </div>
        </div>`;

      const chatBubblesContainer = chatWrapper.querySelector('.chat-msg:last-child .chat-bubbles');
      if (chatBubblesContainer) {
        chatBubblesContainer.insertAdjacentHTML('beforeend', html);

        // Manipulate chat-meta sibling elements
        const chatMeta = chatBubblesContainer.closest('.chat-msg-content').querySelector('.chat-meta');
        if (chatMeta) {
          const chatDate = chatMeta.querySelector('.chat-date');
          if (chatDate) {
            chatDate.remove();  // Remove the .chat-date element
          }

          const chatTime = chatMeta.querySelector('.chat-time');
          if (chatTime) {
            chatTime.textContent = 'Now';  // Update text of .chat-time to "Now"
          }

          const chatRead = chatMeta.querySelector('.chat-read');
          if (chatRead) {
            chatRead.classList.replace('chat-read', 'chat-unread');  // Change class from .chat-read to .chat-unread
          }
        }
      }

      // Reset the message entry height
      messageEntry.style.height = 38 + 'px';

      // Clear the message entry field
      messageEntry.value = '';

      // Scroll to the bottom of the chat bubbles
      function scrollToBottom() {
        const simplebarElement = chatWrapper.querySelector('.chat-body');
        const simplebar = SimpleBar.instances.get(simplebarElement);
        if (simplebar) {
            const scrollElement = simplebar.getScrollElement();
            // console.log("scrollElement.scrollHeight", scrollElement.scrollHeight);
            scrollElement.scrollTop = scrollElement.scrollHeight;
        }
      }

      // Invoke the scroll to bottom after chat messsage has been added
      scrollToBottom();
    }
  }

  // Bind sendChatMsg function to the send chat message button click event
  const sendButtons = document.querySelectorAll('.chat-btn-send');
  if (sendButtons) {
    sendButtons.forEach(sendButton => {
      const chatForm = sendButton.closest('.chat-msg-form');
      sendButton.addEventListener('click', () => sendChatMsg(chatForm));
    });
  }
}

function handleCartShippingMethodSelection() {  

  // Enable selecting radio button on row click
  document.addEventListener("DOMContentLoaded", function () {
    const shippingTable = document.getElementById("shipping-table");

    if (!shippingTable) return;

    const radioButtons = shippingTable.querySelectorAll("input[type='radio']");
    
    shippingTable.addEventListener("click", function (event) {
      const target = event.target;
      if (target.type === "radio") return; // If a radio button itself is clicked, no need to handle it
    
      const row = target.closest("tr");
      if (!row) return; // If somehow the clicked element isn't in a table row, do nothing
      
      const radioButton = row.querySelector("input[type='radio']");
      if (radioButton) {
        radioButton.checked = true; // Check the associated radio button
        // Add class "selected-shipping-method" to the selected row
        document.querySelectorAll('.selected-shipping-method').forEach(function(el) {
          el.classList.remove('selected-shipping-method');
        });
        row.classList.add('selected-shipping-method');
      }
    });
  });
}

function handleCartPaymentMethodSelection() {
  
  document.addEventListener('DOMContentLoaded', function() {
    const paymentMtdAccordion = document.getElementById("payment-method-accordion");

    if (!paymentMtdAccordion) return;
    
    let accordionButtons = paymentMtdAccordion.querySelectorAll('.accordion-button');
    accordionButtons.forEach(button => {
      button.addEventListener('click', function() {
        let radioButton = this.querySelector('input[type="radio"]');
        if (radioButton) {
          radioButton.click();
        }
      });
    });
  });
}

function handleFormConfirmTerms() {  
  
  const submitBtns = document.querySelectorAll('[data-requires-confirm="true"]');
  
  submitBtns.forEach(btn => {
    const form = btn.closest("form");
    const confirmCheckbox = form.querySelector('input[type="checkbox"][id^="confirm-"]');

    if (!confirmCheckbox) return;
    
    confirmCheckbox.addEventListener('click', function (e) {

      if (confirmCheckbox.checked == true) {
        btn.disabled = false;
      } else {
        btn.disabled = true;
      }
    })
  });
}

function handleFullscreenToggle() {  
  
  const fullScreenToggle =  document.querySelectorAll('[data-toggle="fullscreen"]');

  fullScreenToggle.forEach(btn => {
    btn.addEventListener('click', e => {
      const fullscreenBlock = btn.closest('.fullscreen-block');
      fullscreenBlock.classList.toggle('fullscreen-mode');
      btn.classList.toggle('fullscreen-enabled');
    });
  });

  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      const fullScreenElement =  document.querySelector('.fullscreen-mode');

      if (fullScreenElement) {
        fullScreenElement.classList.remove('fullscreen-mode')
      }
    }
  })
  
}

function handleActiveNavLinks() {

  document.addEventListener('DOMContentLoaded', () => {
    // Get the current path from the URL
    const currentPath = window.location.pathname.split('/').pop();

    const mainNav = document.getElementById("navMain");
  
    // Select all elements with the class 'nav-link' and 'dropdown-item'
    const navLinks = mainNav.querySelectorAll('.nav-link, .dropdown-item');
  
    // Function to add the 'active' class to an element and its parent dropdowns
    const activateLinkAndParents = (link) => {
      link.classList.add('active');
  
      // Find parent elements with 'dropdown' class and add 'active' class to their links
      let parent = link.closest('.dropdown');
      while (parent) {
        const parentLink = parent.querySelector('.nav-link, .dropdown-item');
        if (parentLink) {
          parentLink.classList.add('active');
        }
        parent = parent.parentElement.closest('.dropdown');
      }
    };
  
    // Loop through the nav links
    navLinks.forEach(link => {
      // Extract the path from the href attribute
      const linkPath = link.getAttribute('href').split('/').pop();
  
      // Check if the path of the link matches the current path
      if (linkPath === currentPath) {
        // Activate the link and its parent dropdowns
        activateLinkAndParents(link);
      }
    });
  });
}

function handleAddExtraFeatures() {

  document.addEventListener('DOMContentLoaded', function () {
    const addExtraFeatureBtns = document.querySelectorAll('[id^="add-extra-field"]');

    if (!addExtraFeatureBtns) return;

    addExtraFeatureBtns.forEach(addExtraFeatureBtn => {
      addExtraFeatureBtn.addEventListener('click', function () {

        const extraFeatures = addExtraFeatureBtn.previousElementSibling;
        
        if (!extraFeatures || !extraFeatures.classList.contains('extra-features-fields')) return;
        
          const newInput = document.createElement('div');
          newInput.classList.add('col-12', 'col-md-6');
  
          newInput.innerHTML = `
            <div class="input-group mb-4">
              <input type="text" class="form-control custom-color" name="${extraFeatures.dataset.inputName}[]" placeholder="Enter feature">
              <button class="btn btn-outline-primary remove-button custom-color" type="button">Remove</button>
            </div>
          `;
            
          extraFeatures.appendChild(newInput);                                  
      });
    });

    document.addEventListener('click', function (event) {
      if (event.target && event.target.classList.contains('remove-button')) {
        var inputGroup = event.target.closest('.col-12');
        if (inputGroup) {
          inputGroup.remove();
        }
      }
    });
  });
}

function handleVideoPlayer() {
  const plyrElements = document.querySelectorAll('.car-video-player');

  if (!plyrElements) return;

  if (typeof Plyr !== 'undefined') {
    const players = Array.from(plyrElements).map((p) => new Plyr(p));
  }
}

function handle360ImageUpload() {
  document.addEventListener('DOMContentLoaded', () => {
    const dragDropArea = document.getElementById('drag-drop-area-360');
    const fileInput = document.getElementById('file-input');
    const gallery = document.getElementById('gallery-360');

    if (!dragDropArea) return;
    
    dragDropArea.addEventListener('click', () => fileInput.click());

    dragDropArea.addEventListener('dragover', (event) => {
      event.preventDefault();
      dragDropArea.classList.add('drag-over');
    });

    dragDropArea.addEventListener('dragleave', () => {
      dragDropArea.classList.remove('drag-over');
    });

    dragDropArea.addEventListener('drop', (event) => {
      event.preventDefault();
      dragDropArea.classList.remove('drag-over');
      const files = event.dataTransfer.files;
      handleFiles(files);
    });

    fileInput.addEventListener('change', () => {
      const files = fileInput.files;
      handleFiles(files);
    });

    function handleFiles(files) {
      Array.from(files).forEach(file => {
        if (!file.type.startsWith('image/')) {
          return;
        }

        const reader = new FileReader();
        reader.onload = (event) => {
          const dataURL = event.target.result;
          addImage(dataURL, file.name);
          saveOrder();
        };
        reader.readAsDataURL(file);
      });
    }

    function addImage(src, fileName) {
      const wrapper = document.createElement('div');
      wrapper.classList.add('image-wrapper', 'rounded-1', 'border');

      const img = document.createElement('img');
      img.src = src;
      img.draggable = true;
      img.dataset.fileName = fileName;

      const number = document.createElement('div');
      number.classList.add('image-number-360');

      const removeBtn = document.createElement('span');
      removeBtn.textContent = '';
      removeBtn.classList.add('remove-btn');
      removeBtn.addEventListener('click', () => removeImage(wrapper));

      wrapper.appendChild(img);
      wrapper.appendChild(number);
      wrapper.appendChild(removeBtn);

      img.addEventListener('dragstart', handleDragStart);
      img.addEventListener('dragover', handleDragOver);
      img.addEventListener('dragend', handleDragEnd);

      img.addEventListener('touchstart', handleTouchStart);
      img.addEventListener('touchmove', handleTouchMove);
      img.addEventListener('touchend', handleTouchEnd);

      gallery.appendChild(wrapper);
      updateNumbers();
    }


    let draggedElement = null;
    const placeholder = document.createElement('div');
    placeholder.classList.add('placeholder-360');

    function handleDragStart(event) {
      draggedElement = event.target.parentElement; // The wrapper div
      event.target.classList.add('dragging');
      event.dataTransfer.effectAllowed = 'move';
      event.dataTransfer.setData('text/html', draggedElement.outerHTML);
      setTimeout(() => {
        draggedElement.style.display = 'none';
      }, 0);
    }

    function handleDragOver(event) {
      event.preventDefault();
      event.dataTransfer.dropEffect = 'move';

      const target = event.target.closest('.image-wrapper');
      if (target && target !== draggedElement) {
        const galleryChildren = Array.from(gallery.children);
        const draggedIndex = galleryChildren.indexOf(draggedElement);
        const targetIndex = galleryChildren.indexOf(target);

        if (gallery.contains(placeholder)) {
          gallery.removeChild(placeholder);
        }

        if (draggedIndex < targetIndex) {
          gallery.insertBefore(placeholder, target.nextSibling);
        } else {
          gallery.insertBefore(placeholder, target);
        }
      }
    }

    function handleDragEnd(event) {
      event.target.classList.remove('dragging');
      draggedElement.style.display = 'block';
      if (gallery.contains(placeholder)) {
        gallery.replaceChild(draggedElement, placeholder);
      }
      draggedElement = null;
      updateNumbers();
      saveOrder();
    }

    function handleTouchStart(event) {
      event.preventDefault();
      const touch = event.targetTouches[0];
      draggedElement = event.target.parentElement;
      draggedElement.classList.add('dragging');
      placeholder.style.width = `${draggedElement.offsetWidth}px`;
      placeholder.style.height = `${draggedElement.offsetHeight}px`;
      placeholder.style.display = 'block';
      gallery.insertBefore(placeholder, draggedElement.nextSibling);
      draggedElement.style.display = 'none';
    }

    function handleTouchMove(event) {
      event.preventDefault();
      const touch = event.targetTouches[0];

      const target = document.elementFromPoint(touch.clientX, touch.clientY).closest('.image-wrapper');
      if (target && target !== draggedElement && target !== placeholder) {
        const galleryChildren = Array.from(gallery.children);
        const draggedIndex = galleryChildren.indexOf(draggedElement);
        const targetIndex = galleryChildren.indexOf(target);

        if (gallery.contains(placeholder)) {
          gallery.removeChild(placeholder);
        }

        if (draggedIndex < targetIndex) {
          gallery.insertBefore(placeholder, target.nextSibling);
        } else {
          gallery.insertBefore(placeholder, target);
        }
      }
    }

    function handleTouchEnd(event) {
      event.preventDefault();
      draggedElement.classList.remove('dragging');
      draggedElement.style.display = 'block';
      if (gallery.contains(placeholder)) {
        gallery.replaceChild(draggedElement, placeholder);
      }
      placeholder.style.display = 'none';
      draggedElement = null;
      updateNumbers();
      saveOrder();
    }

    function removeImage(wrapper) {
      const images = Array.from(gallery.children).filter(child => child !== placeholder);
      const index = images.indexOf(wrapper);
      gallery.removeChild(wrapper);
      updateNumbers();
      saveOrder();
    }

    function updateNumbers() {
      const images = Array.from(gallery.children).filter(child => child !== placeholder);
      images.forEach((wrapper, index) => {
        const number = wrapper.querySelector('.image-number-360');
        number.textContent = index + 1;
      });
    }

    function saveOrder() {
      const order = Array.from(gallery.children)
        .filter(child => child !== placeholder)
        .map(wrapper => {
          const img = wrapper.querySelector('img');
          return {
            src: img.src,
            fileName: img.dataset.fileName
          };
        });
      localStorage.setItem('imageOrder360', JSON.stringify(order));
    }

    function loadOrder() {
      const order = JSON.parse(localStorage.getItem('imageOrder360'));
      if (order) {
        order.forEach(imageData => {
          addImage(imageData.src, imageData.fileName);
        });
      }
    }

    const uploadForm = dragDropArea.closest('form');
    uploadForm.addEventListener('submit', (event) => {
      const formData = new FormData(uploadForm);
      const orderedFiles = Array.from(gallery.children)
        .filter(child => child !== placeholder)
        .map(wrapper => {
          const img = wrapper.querySelector('img');
          const fileName = img.dataset.fileName;
          return Array.from(fileInput.files).find(file => file.name === fileName);
        });

      orderedFiles.forEach((file, index) => {
        formData.set(`images-360[${index}]`, file);
      });

      // Optional: log FormData to verify order
      for (let pair of formData.entries()) {
        // console.log(pair[0] + ', ' + pair[1]);
      };

      // Prevent default form submission for demonstration purposes
      event.preventDefault();
      // Use the following line instead of event.preventDefault() to enable actual form submission
      // uploadForm.submit();
    });

    loadOrder();
    // localStorage.removeItem('imageOrder360360');
  });
}

function fetchJSONFile(filePath) {
  return fetch(filePath)
    .then(response => response.json())
    .then(data => {
      // console.log(data);
      return data;
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

function handleTeamBioModal() {
  fetchJSONFile('data/team.json')
    .then(team => {
      const teamModal = document.getElementById('teamBio');

      if (teamModal) {
        teamModal.addEventListener('show.bs.modal', event => {
          /* Button that triggered the modal */
          const targetModal = event.relatedTarget;
          const targetUser = targetModal.dataset.bsMemberId;
          const teamMember = getObjectItemByEntryKey(team, 'id', targetUser);

          // console.log('teamMember', teamMember);

          teamModal.querySelector('.member-image').setAttribute('src', teamMember['image']);
          teamModal.querySelector('.member-name').textContent = teamMember['name'] || '';
          teamModal.querySelector('.member-title').textContent = teamMember['title'] || '';
          teamModal.querySelector('.member-dpt').textContent = teamMember['department'] || '';
          teamModal.querySelector('.member-desc1').textContent = teamMember['description1'] || '';
          teamModal.querySelector('.member-desc2').textContent = teamMember['description2'] || '';
          teamModal.querySelector('.member-car').textContent = teamMember['car'] || '';
          teamModal.querySelector('.member-movie').textContent = teamMember['movie'] || '';

          if (teamMember['x']) {
            const x = teamModal.querySelector('.x');
            x.setAttribute('href', teamMember['x']);
            x.parentNode.classList.remove('d-none');
          }

          if (teamMember['facebook']) {
            const facebook = teamModal.querySelector('.facebook');
            facebook.setAttribute('href', teamMember['facebook']);
            facebook.parentNode.classList.remove('d-none');
          }

          if (teamMember['instagram']) {
            const instagram = teamModal.querySelector('.instagram');
            instagram.setAttribute('href', teamMember['instagram']);
            instagram.parentNode.classList.remove('d-none');
          }

          if (teamMember['linkedin']) {
            const linkedin = teamModal.querySelector('.linkedin');
            linkedin.setAttribute('href', teamMember['linkedin']);
            linkedin.parentNode.classList.remove('d-none');
          }

          if (teamMember['email']) {
            const email = teamModal.querySelector('.email');
            email.setAttribute('href', 'mailto:' + teamMember['email']);
            email.parentNode.classList.remove('d-none');
          }
          
          // /* Replace the variables with their values */
          // const replacedHtml = html.replace(/\{\{(\w+)\}\}/g, (match, variable) => {
          //   return teamMember[variable] || ''; // Use the value from the data object or an empty string if not found
          // });
          
          // /* Update the HTML content with the replaced values */
          // teamModal.innerHTML = replacedHtml;
        });
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

function handleVendorReviewStars() {
  document.addEventListener('DOMContentLoaded', function() {
    const products = document.querySelectorAll('.vendor-review-stars');
  
    products.forEach(product => {
        const rating = parseFloat(product.dataset.rating);
        // const ratingStarsContainer = product.querySelector('.rating-stars');
        generateVendorStarRating(rating, product);
    });
  });
}

function handle360CarView() {
  /* Car 360 degree view */
  document.addEventListener('DOMContentLoaded', function () {
    if (typeof (judoSpin) != 'undefined') {
      judoSpin('.image-spin-360', { currImage: 1, enableDragHandle: true });
    }
  });
}

function handleAddListingSideNav() {
  /* License: https://codyhouse.co/mit */
  document.addEventListener("DOMContentLoaded", function () {
    var listingsAccordions = document.querySelector('.submit-listing-form');

    const _scrollOffset = 350;

    if (listingsAccordions) {
      // cache DOM elements
      var windowHeight = window.innerHeight,
        accordion = listingsAccordions.querySelectorAll('div[id^="listing"][id$="accordion"]'),
        sideNav = document.querySelector('.submit-listing-nav'),
        accordionSidebarLinks = sideNav.querySelectorAll('li');
        
      // initialize variables
      var scrolling = false,
        sidebarAnimation = false,
        resizing = false,
        svgCircleLength = Math.PI * (accordionSidebarLinks[0].querySelector('circle').getAttribute('r') * 3);
        
      window.addEventListener('scroll', checkRead);
      window.addEventListener('scroll', checkSidebar);
      window.addEventListener('resize', resetScroll);

      updateArticle();
      updateSidebarPosition();

      sideNav.addEventListener('click', function (event) {
        var target = event.target.closest('a');
        if (target && sideNav.contains(target)) {
          event.preventDefault();
          var selectedIndex = Array.prototype.indexOf.call(accordionSidebarLinks, target.parentNode),
            selectedArticle = accordion[selectedIndex],
            selectedArticleTop = selectedArticle.getBoundingClientRect().top + window.pageYOffset - _scrollOffset;

          window.removeEventListener('scroll', checkRead);

          window.scrollTo({
            top: selectedArticleTop + 2,
            behavior: 'smooth'
          });

          setTimeout(function () {
            checkRead();
            window.addEventListener('scroll', checkRead);
          }, 300);
        }
      });

    }

    function checkRead() {
      if (!scrolling) {
        scrolling = true;
        (!window.requestAnimationFrame) ? setTimeout(updateArticle, 300): window.requestAnimationFrame(updateArticle);
      }
    }

    function checkSidebar() {
      if (!sidebarAnimation) {
        sidebarAnimation = true;
        (!window.requestAnimationFrame) ? setTimeout(updateSidebarPosition, 300): window.requestAnimationFrame(updateSidebarPosition);
      }
    }

    function resetScroll() {
      if (!resizing) {
        resizing = true;
        (!window.requestAnimationFrame) ? setTimeout(updateParams, 300): window.requestAnimationFrame(updateParams);
      }
    }

    function updateParams() {
      windowHeight = window.innerHeight;
      window.removeEventListener('scroll', checkRead);
      window.removeEventListener('scroll', checkSidebar);
      
      window.addEventListener('scroll', checkRead);
      window.addEventListener('scroll', checkSidebar);
      
      resizing = false;
    }

    function updateArticle() {
      var scrollTop = window.pageYOffset;

      accordion.forEach(function (article, index) {
        var articleTop = article.getBoundingClientRect().top + window.pageYOffset,
          articleHeight = article.offsetHeight,
          articleSidebarLink = accordionSidebarLinks[index].querySelector('a');

        if (index === accordion.length - 1) articleHeight -= windowHeight;

        if (articleTop > scrollTop + _scrollOffset) {
          articleSidebarLink.classList.remove('read', 'reading', 'custom-color');
        } else if (scrollTop + _scrollOffset >= articleTop && articleTop + articleHeight > scrollTop + _scrollOffset) {
          var dashoffsetValue = svgCircleLength * (1 - (scrollTop + _scrollOffset - articleTop) / articleHeight);
          articleSidebarLink.classList.add('reading', 'custom-color');
          articleSidebarLink.classList.remove('read');
          articleSidebarLink.querySelector('circle').setAttribute('stroke-dashoffset', dashoffsetValue);
        } else {
          articleSidebarLink.classList.remove('reading', 'custom-color');
          articleSidebarLink.classList.add('read', 'custom-color');
        }
      });
      scrolling = false;
    }

    function updateSidebarPosition() {
      var listingsAccordionsTop = listingsAccordions.getBoundingClientRect().top + window.pageYOffset,
        listingsAccordionsHeight = listingsAccordions.offsetHeight,
        scrollTop = window.pageYOffset;

      if (scrollTop < listingsAccordionsTop) {
        // sideNav.classList.remove('fixed');
        sideNav.style.top = '';
      } else if (scrollTop >= listingsAccordionsTop && scrollTop < listingsAccordionsTop + listingsAccordionsHeight - windowHeight) {
        // sideNav.classList.add('fixed');
        sideNav.style.top = '';
      } else {
        var articlePaddingTop = parseInt(window.getComputedStyle(accordion[1]).paddingTop);
        // if (sideNav.classList.contains('fixed')) {
        // sideNav.classList.remove('fixed');
        // sideNav.style.top = listingsAccordionsHeight + articlePaddingTop - windowHeight + 'px';
        // }
      }
      sidebarAnimation = false;
    }
  });
}

function handleAddListingSelectPlan() {
  
  const plans = document.querySelectorAll('.plan');
  
  let selectedPlanId = null;

  plans.forEach(plan => {

    plan.addEventListener('click', function(e) {
      
      const selectedId = plan.id;
      
      if (selectedPlanId === selectedId) {
        // Reset all plans to original state
        // const plans = document.querySelectorAll('.plan');
        plans.forEach(plan => {
          plan.classList.remove('inactive-plan');
          const checkMark = plan.querySelector('.selected-plan');
          if (checkMark) {
            plan.removeChild(checkMark);
          }
        });
        selectedPlanId = null;
      } else {
        // Select the clicked plan and make others inactive
        selectedPlanId = selectedId;
        // const plans = document.querySelectorAll('.plan');
        plans.forEach(plan => {
          if (plan.id === selectedId) {
            plan.classList.remove('inactive-plan');
            if (!plan.querySelector('.selected-plan')) {
              const checkMark = document.createElement('div');
              checkMark.className = 'selected-plan text-primary custom-color color-override bg-body';
              checkMark.innerHTML = '<svg  xmlns="http://www.w3.org/2000/svg"  width="36"  height="36"  viewBox="0 0 24 24"  fill="currentColor"  class="icon icon-tabler icons-tabler-filled icon-tabler-circle-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M17 3.34a10 10 0 1 1 -14.995 8.984l-.005 -.324l.005 -.324a10 10 0 0 1 14.995 -8.336zm-1.293 5.953a1 1 0 0 0 -1.32 -.083l-.094 .083l-3.293 3.292l-1.293 -1.292l-.094 -.083a1 1 0 0 0 -1.403 1.403l.083 .094l2 2l.094 .083a1 1 0 0 0 1.226 0l.094 -.083l4 -4l.083 -.094a1 1 0 0 0 -.083 -1.32z" /></svg>';
              plan.appendChild(checkMark);
            }
          } else {
            plan.classList.add('inactive-plan');
            const checkMark = plan.querySelector('.selected-plan');
            if (checkMark) {
              plan.removeChild(checkMark);
            }
          }
        });
      }
      
      setPlanSummary(selectedPlanId);
    });
  });

  function setPlanSummary(selectedId) {
    
    const planSummary = document.getElementById('plan-summary');
    const planSummaryName = planSummary.querySelector('.plan-name');
    const planSummaryAmount = planSummary.querySelector('.plan-amount');
    const planSummaryDiscount = planSummary.querySelector('.plan-discount');
    const planSummaryTotal = planSummary.querySelector('.plan-total');
    const planSummaryAlert = document.querySelector('.summary-alert');

    if (selectedId !== null) {
      const selectedPlan = document.getElementById(selectedId);
      const selectedPlanName = selectedPlan.querySelector('.plan-name').innerHTML;
      const selectedPlanCurrency = selectedPlan.querySelector('.plan-currency').innerHTML;
      const selectedPlanAmount = selectedPlan.querySelector('.plan-amount').innerHTML;

      planSummaryName.innerHTML = selectedPlanName;
      planSummaryAmount.innerHTML = `${selectedPlanCurrency}${selectedPlanAmount}`;
      planSummaryDiscount.innerHTML = `${selectedPlanCurrency}0`;
      planSummaryTotal.innerHTML = `${selectedPlanCurrency}${selectedPlanAmount}`;

      planSummaryAlert.classList.add('d-none');
    } else {
      planSummaryName.innerHTML = `&ndash;`;
      planSummaryAmount.innerHTML = `&ndash;`;
      planSummaryDiscount.innerHTML = `&ndash;`;
      planSummaryTotal.innerHTML = `&mdash;`;

      planSummaryAlert.classList.remove('d-none');
    }
  }
}

async function handleCountrySelection() {
  let data = await fetchJSONFile('data/countries.json');

  const countrySelect = document.getElementById('listing-owner-country');

  if (!countrySelect) return;
  
  const regionSelect = document.getElementById('listing-owner-state');
  const citySelect = document.getElementById('listing-owner-city');

  // Populate countries
  data.forEach(country => {
    const option = document.createElement('option');
    option.value = country.country;
    option.textContent = country.country;
    countrySelect.appendChild(option);
  });

  // Event listener to populate regions based on selected country
  if (countrySelect && regionSelect && citySelect) {
    countrySelect.addEventListener('change', () => {

      // Clear previous options
      regionSelect.innerHTML = '';
      citySelect.innerHTML = '';

      const selectedCountry = countrySelect.value;
      const countryData = data.find(country => country.country === selectedCountry);
      
      if (countryData) {
        countryData.regions.forEach(region => {
          const option = document.createElement('option');
          option.value = region.region;
          option.textContent = region.region;
          regionSelect.appendChild(option);
        });        
      }
    });
  }

  // Event listener to populate cities based on selected region
  if (regionSelect && citySelect) {
    regionSelect.addEventListener('change', () => {

      // Clear previous options
      citySelect.innerHTML = '';

      const selectedCountry = countrySelect.value;
      const selectedRegion = regionSelect.value;
      const countryData = data.find(country => country.country === selectedCountry);
      
      if (countryData) {

        const regionData = countryData.regions.find(region => region.region === selectedRegion);

        if (regionData) {
          regionData.cities.forEach(city => {
            const option = document.createElement('option');
            option.value = city;
            option.textContent = city;
            citySelect.appendChild(option);
          });
        }
      }
    });
  }

  // Trigger the change event to populate the regions and cities for the first time
  if (regionSelect) {
    countrySelect.dispatchEvent(new Event('change'));
  }
}

function handlejQueryScripts() {
  
  $(document).ready(function () {

    /* Initialize all tooltips */
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

    /* Images lazy load */
    if ($.fn.lazy !== undefined) {
      $('img.lazy').lazy({effect : 'fadeIn'});
    }
    
    $.fn.randomize = function(selector){
      (selector ? this.find(selector) : this).parent().each(function(){
          $(this).children(selector).sort(function(){
              return Math.random() - 0.5;
          }).detach().appendTo(this);
      });

      return this;
    };
    
    /* Cars Slider */
    if ($.fn.owlCarousel !== undefined) {
      var sync1 = $("#sync1");
      var sync2 = $("#sync2");
      var slidesPerPage = 8; // number of thumbnails per page
      var syncedSecondary = true;

      sync1.owlCarousel({
        items: 1,
        slideSpeed: 2000,
        nav: true,
        navText: ["", ""],
        autoplay: false,
        dots: false,
        loop: true,
        lazyLoad: true,
        responsiveRefreshRate: 200
      }).on('changed.owl.carousel', syncPosition);

      sync2
        .on('initialized.owl.carousel', function () {
          sync2.find(".owl-item").eq(0).addClass("current");
        })
        .owlCarousel({
          items: slidesPerPage,
          margin: 5,
          dots: false,
          nav: true,
          navText: ["", ""],
          smartSpeed: 200,
          slideSpeed: 500,
          slideBy: slidesPerPage, //alternatively you can slide by 1, this way the active slide will stick to the first item in the second carousel
          responsiveRefreshRate: 100,
          lazyLoad: true,
          responsive: {
            0: {
              items: 2
            },
            500: {
              items: 3
            },
            768: {
              items: 4
            },
            1000: {
              items: 6
            }
          }
        }).on('changed.owl.carousel', syncPosition2);

      function syncPosition(el) {
        //if you set loop to false, you have to restore this next line
        //var current = el.item.index;

        //if you disable loop you have to comment this block
        var count = el.item.count - 1;
        var current = Math.round(el.item.index - (el.item.count / 2) - .5);

        if (current < 0) {
          current = count;
        }
        if (current > count) {
          current = 0;
        }

        //end block

        sync2.find(".owl-item").removeClass("current").eq(current).addClass("current");
        var onscreen = sync2.find('.owl-item.active').length - 1;
        var start = sync2.find('.owl-item.active').first().index();
        var end = sync2.find('.owl-item.active').last().index();

        if (current > end) {
          sync2.data('owl.carousel').to(current, 100, true);
        }
        if (current < start) {
          sync2.data('owl.carousel').to(current - onscreen, 100, true);
        }
      }

      function syncPosition2(el) {
        if (syncedSecondary) {
          var number = el.item.index;
          sync1.data('owl.carousel').to(number, 100, true);
        }
      }

      sync2.on("click", ".owl-item", function (e) {
        e.preventDefault();
        var number = $(this).index();
        sync1.data('owl.carousel').to(number, 300, true);
      });
    }  
    
    /* Cars Video Slider */
    if ($.fn.owlCarousel !== undefined) {

      const videoSync1 = $("#videoSync1"); // Main carousel
      const videoSync2 = $("#videoSync2"); // Thumbnails

      videoSync1.owlCarousel({
        items: 1,
        loop: false,
        autoplay: false,
        nav: true,
        navText: ["", ""],
        dots: false,
        lazyLoad: true,
      }).on('changed.owl.carousel', function (event) {
        var index = event.item.index;
        videoSync2.find(".owl-item").removeClass("current");
        videoSync2.find(".owl-item").eq(index).addClass("current");
        videoSync2.trigger('to.owl.carousel', [index, 300, true]);
      });

      videoSync2.owlCarousel({
        items: 8,
        loop: false,
        margin: 5,
        nav: true,
        navText: ["", ""],
        dots: false,
        center: false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 2
          },
          500: {
            items: 3
          },
          768: {
            items: 4
          },
          1000: {
            items: 6
          }
        }
      }).on('click', '.owl-item', function () {
        var index = $(this).index();
        videoSync1.trigger('to.owl.carousel', [index, 300, true]);
      }).on('initialized.owl.carousel changed.owl.carousel', function (event) {
        var index = event.item.index;
        videoSync2.find(".owl-item").removeClass("current");
        videoSync2.find(".owl-item").eq(index).addClass("current");
      }).on('changed.owl.carousel', function (event) {
        var index = event.item.index;
        videoSync1.trigger('to.owl.carousel', [index, 300, true]);
      });

      // Set the initial active class for the first item
      videoSync2.find(".owl-item").eq(0).addClass("current");
    }
    
    /* Basic Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _basicC = $('.basic-carousel');
      _basicC.owlCarousel({
        loop: _basicC.data('loop') ?? false,
        margin: 25,
        nav: _basicC.data('nav') ?? true,
        dots: _basicC.data('dots') ?? false,
        autoplay: _basicC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          768: {
            items: 2
          },
          1000: {
            items: 3
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      });
    }

    /* Brands Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _browseBrandsC = $('.browse-brands-carousel');
      _browseBrandsC.owlCarousel({
        loop: _browseBrandsC.data('loop') ?? false,
        margin: 25,
        nav: _browseBrandsC.data('nav') ?? true,
        dots: _browseBrandsC.data('dots') ?? false,
        autoplay: _browseBrandsC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          600: {
            items: 2
          },
          1000: {
            items: 5
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      });
    }

    /* Body Types Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _browseBodyTypesC = $('.browse-body-types-carousel');
      _browseBodyTypesC.owlCarousel({
        loop: _browseBodyTypesC.data('loop') ?? false,
        margin: 25,
        nav: _browseBodyTypesC.data('nav') ?? true,
        dots: _browseBodyTypesC.data('dots') ?? false,
        autoplay: _browseBodyTypesC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          600: {
            items: 2
          },
          1000: {
            items: 5
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      });
    }

    /* Body Types Image Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _browseBodyTypesImageC = $('.browse-body-types-image-carousel');
      _browseBodyTypesImageC.owlCarousel({
        loop: _browseBodyTypesImageC.data('loop') ?? false,
        margin: 25,
        nav: _browseBodyTypesImageC.data('nav') ?? true,
        dots: _browseBodyTypesImageC.data('dots') ?? false,
        autoplay: _browseBodyTypesImageC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          600: {
            items: 2
          },
          1000: {
            items: 5
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      });
    }

    /* Parners Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _ourPartnersC = $('.our-partners-carousel');
      _ourPartnersC.owlCarousel({
        loop: _ourPartnersC.data('loop') ?? false,
        margin: 25,
        nav: _ourPartnersC.data('nav') ?? true,
        dots: _ourPartnersC.data('dots') ?? false,
        autoplay: _ourPartnersC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          600: {
            items: 2
          },
          1000: {
            items: 4
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      });
    }

    /* Featured-on Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _featuredOnC = $("#featured-on-carousel");
      _featuredOnC.owlCarousel({
        loop: _featuredOnC.data('loop') ?? false,
        margin: 25,
        nav:  _featuredOnC.data('nav') ?? false,
        dots:  _featuredOnC.data('dots') ?? true,
        autoplay: _featuredOnC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          600: {
            items: 2
          },
          1000: {
            items: 4
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      });
    }

    /* Editor's Pick Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _editorsPickC = $("#editors-pick-carousel");
      _editorsPickC.owlCarousel({
        loop: _editorsPickC.data('loop') ?? false,
        margin: 25,
        nav:  _editorsPickC.data('nav') ?? true,
        dots:  _editorsPickC.data('dots') ?? true,
        autoplay: _editorsPickC.data('autoplay') ?? true,
        items: 1,
        lazyLoad: true,
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      })
    }

    /* Team Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _teamC = $("#team-carousel");
      _teamC.owlCarousel({
        loop: _teamC.data('loop') ?? false,
        margin: 25,
        nav:  _teamC.data('nav') ?? true,
        dots:  _teamC.data('dots') ?? true,
        autoplay: _teamC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          720: {
            items: 2
          },
          960: {
            items: 3
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      })
    }

    /* Featured Cars Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _featutedCarsC = $("#featured-cars-carousel");
      const _featutedCarsCItems = _featutedCarsC.hasClass('featured-full-width') ? 3 : 2;
      _featutedCarsC.owlCarousel({
        loop: _featutedCarsC.data('loop') ?? false,
        margin: 25,
        nav:  _featutedCarsC.data('nav') ?? true,
        dots:  _featutedCarsC.data('dots') ?? true,
        autoplay: _featutedCarsC.data('autoplay') ?? false,
        lazyLoad: true,
        items: _featutedCarsCItems,
        responsive: {
          0: {
            items: 1
          },
          1000: {
            items: 2
          },
          1300: {
            items: _featutedCarsCItems
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      })
    }

    /* Testimonials Carousel */
    if ($.fn.owlCarousel !== undefined) {
      const _testimonialC = $("#testimonial-carousel");
      _testimonialC.owlCarousel({
        loop: _testimonialC.data('loop') ?? false,
        margin: 25,
        nav:  _testimonialC.data('nav') ?? false,
        dots:  _testimonialC.data('dots') ?? true,
        autoplay: _testimonialC.data('autoplay') ?? false,
        lazyLoad: true,
        responsive: {
          0: {
            items: 1
          },
          720: {
            items: 2
          },
          960: {
            items: 3
          }
        },
        navText: [
          chevronLeftIcon(),
          chevronRightIcon()
        ]
      })
    }
    
    /* Testimonial Card Slider */
    if ($.fn.owlCarousel !== undefined) {

      const testimonialCardSync1 = $("#testimonialCardSync1"); // Main carousel
      const testimonialCardSync2 = $("#testimonialCardSync2"); // Thumbnails

      testimonialCardSync1.owlCarousel({
        items: 1,
        loop: true,
        margin: 0,
        autoplay: true,
        autoplayTimeout: 3000,
        autoplayHoverPause: true,
        nav: false,
        navText: ["", ""],
        dots: false,
        lazyLoad: true,
        animateOut: 'fadeOut',
        onTranslate: function (event) {
          const items = event.target.querySelectorAll('.owl-item');

          if (!items) return;

          items.forEach(function (item) {
            item.classList.remove('active');
          });
        },
        onTranslated: function (event) {
          const items = event.target.querySelectorAll('.owl-item');
          const currentIndex = event.item.index;

          if (!items) return;
          
          items[currentIndex].classList.add('active');
          updateButtonStates(event);
        }
      }).on('changed.owl.carousel', function (event) {
        const index = event.item.index - event.relatedTarget._clones.length / 2;
        const items = event.item.count;

        // Handle looping
        const realIndex = (index < 0) ? items + index : index % items;

        testimonialCardSync2.trigger('to.owl.carousel', [realIndex, 300, true]);
        testimonialCardSync2.find(".owl-item").removeClass("current");
        testimonialCardSync2.find(".owl-item").eq(realIndex).addClass("current");
      });
      
      testimonialCardSync2.owlCarousel({
        items: 1,
        loop: false,
        margin: 0,
        nav: false,
        navText: ["", ""],
        dots: false,
        center: false,
        lazyLoad: true,
        animateOut: 'fadeOut',
        onTranslate: function (event) {
          const items = event.target.querySelectorAll('.owl-item');
          items.forEach(function (item) {
            item.classList.remove('active');
          });
        },
        onTranslated: function (event) {
          const items = event.target.querySelectorAll('.owl-item');

          if (!items) return;

          const currentIndex = event.item.index;
          items[currentIndex].classList.add('active');
          updateButtonStates(event);
        }
      }).on('changed.owl.carousel', function (event) {
        const index = event.item.index - event.relatedTarget._clones.length / 2;
        const items = event.item.count;
        
        if (!items) return;

        // Handle looping
        const realIndex = (index < 0) ? items + index : index % items;

        testimonialCardSync1.trigger('to.owl.carousel', [realIndex, 300, true]);
        testimonialCardSync1.find(".owl-item").removeClass("current");
        testimonialCardSync1.find(".owl-item").eq(realIndex).addClass("current");
      });

      // Set the initial active class for the first item
      testimonialCardSync2.find(".owl-item").eq(0).addClass("active");

      function updateButtonStates(event) {

        if (event !== undefined) return;

        const items = event.target.querySelectorAll('.owl-item');
        const currentIndex = event.item.index;
        
        if (!items) return;
        
        // Determine if the current slide is the first or the last
        const isFirst = currentIndex === 0;
        const isLast = currentIndex === items.length - 1;

        // Update button states for the current slide
        items.forEach(function (item, index) {
          const prevBtn = item.querySelector('.testiCustomPrevBtn');
          const nextBtn = item.querySelector('.testiCustomNextBtn');

          if (prevBtn) {
            if (isFirst) {
              prevBtn.classList.add('inactive');
            } else {
              prevBtn.classList.remove('inactive');
            }
          }

          if (nextBtn) {
            if (isLast) {
              nextBtn.classList.add('inactive');
            } else {
              nextBtn.classList.remove('inactive');
            }
          }
        });
      }

      // Custom Button Events
      $(document).on('click', '.testiCustomNextBtn', function () {
        if (!$(this).hasClass('inactive')) {
          testimonialCardSync1.trigger('next.owl.carousel');
        }
      });
      $(document).on('click', '.testiCustomPrevBtn', function () {
        if (!$(this).hasClass('inactive')) {
          testimonialCardSync1.trigger('prev.owl.carousel');
        }
      });

      // Manually trigger the changed event to set initial button states
      // Fix: 'initialized.owl.carousel' not being captured
      const initialEvent = {
        target: testimonialCardSync1[0],
        item: {
          index: 0,
          count: testimonialCardSync1.find('.owl-item').length
        }
      };
      updateButtonStates(initialEvent);
    }
    
    /* Car slider gallery popup */
    if ($.fn.magnificPopup !== undefined) {
      $('.popup-gallery').magnificPopup({
        delegate: '.owl-item:not(.cloned) a',
        type: 'image',
        removalDelay: 500, //delay removal by X to allow out-animation
        gallery: {
          enabled: true
        },
        preloader: true,
        closeOnContentClick: true,
        closeBtnInside: false,
        fixedContentPos: true,
        mainClass: 'mfp-no-margins mfp-with-zoom',
        // class to remove default margin from left and right side
        image: {
          verticalFit: true
        },
        zoom: {
          enabled: true,
          duration: 300
        }
      });

      /* Utilize zoom action */
      $('.btn-slider-zoomin').on('click', () => {
        $('.owl-item.active:not(.cloned) a').trigger('click')
      })
    }
    
    /* Car slider video popup */
    if ($.fn.magnificPopup !== undefined) {
      $('.popup-video').magnificPopup({
        delegate: '.owl-item:not(.cloned) a',
        type: 'videop',
        removalDelay: 500, //delay removal by X to allow out-animation
        gallery: {
          enabled: true
        },
        preloader: true,
        closeOnContentClick: true,
        closeBtnInside: false,
        fixedContentPos: true,
        mainClass: 'mfp-no-margins mfp-with-zoom',
        // class to remove default margin from left and right side
        image: {
          verticalFit: true
        },
        zoom: {
          enabled: true,
          duration: 300
        }
      });

      /* Utilize zoom action */
      $('.btn-slider-zoomin').on('click', () => {
        $('.owl-item.active:not(.cloned) a').trigger('click')
      })
    }
    
    /* Blog gallery popup */
    if ($.fn.magnificPopup !== undefined) {
      $('.blog-popup-gallery').magnificPopup({
        delegate: 'a',
        type: 'image',
        tLoading: 'Loading image #%curr%...',
        mainClass: 'mfp-img-mobile',
        gallery: {
          enabled: true,
          navigateByImgClick: true,
          preload: [0,1] // Will preload 0 - before current, and 1 after the current image
        },
        image: {
          tError: '<a href="%url%">The image #%curr%</a> could not be loaded.',
          titleSrc: function(item) {
            const photoCredit = item.el.data('owner') ?? '';
            const creditText = photoCredit ? `<small>by ${photoCredit}</small>` : '';
            return item.el.attr('title') + creditText;
          }
        }
      });
    };

    if ($.fn.masonry !== undefined) {
      const testimonialsContainer = $('.testimonials-wrapper .row');
      testimonialsContainer.masonry({
        // isFitWidth: true,
        itemSelector: '.testimonial-item'
      });
      $('button.get-testimonials').on('click', function () {
        let containerT = '';
        
        function shuffleArray(array) {
          for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
          }
        }
        
        const items = $('.testimonials-wrapper .testimonial-item:lt(10)'); // Get only the first 10 items using jQuery :lt
        shuffleArray(items);
        
        const randomElements = items.slice(0, 3);
        
        // $.each($('.testimonials-wrapper .item').randomize().slice(0,3), function(i,val) {
        $.each(randomElements, function(i,val) {
          containerT += val.outerHTML;
        });
        const el = $(`${containerT}`)
        testimonialsContainer.masonry().append(el).masonry('appended', el);
      })
    }

    /* Review Progress Bars */
    $(".review-progress").each(function(){
    
      const _bar = $(this).find('.bar');
      const _val = $(this).find('span');
      const perc = parseInt( _val.text(), 10);
    
      $({p:0}).animate({p:perc}, {
        duration: 3000,
        easing: 'swing',
        step: function(p) {
          _bar.css({
            transform: 'rotate('+ (45+(p*1.8)) +'deg)', // 100%=180Â° so: Â° = % * 1.8
            // 45 is to add the needed rotation to have the green borders at the bottom
          });
          _val.text((p|0)/10);
        }
      });
    });
    
    $('.reviews-widget-2 .review-rating strong').each(function() {
      $(this).text(($(this).text()/10).toFixed(1))
    });
    
  });
}
